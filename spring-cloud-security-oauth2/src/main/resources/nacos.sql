
CREATE DATABASE /*!32312 IF NOT EXISTS*/`nacos` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;

USE `nacos`;

/*Table structure for table `config_info` */

DROP TABLE IF EXISTS `config_info`;

CREATE TABLE `config_info` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8_bin DEFAULT NULL,
  `content` longtext COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
  `src_user` text COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) COLLATE utf8_bin DEFAULT NULL,
  `c_use` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `effect` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `type` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `c_schema` text COLLATE utf8_bin,
  `encrypted_data_key` text COLLATE utf8_bin NOT NULL COMMENT '密钥',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB AUTO_INCREMENT=78 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info';

/*Data for the table `config_info` */

insert  into `config_info`(`id`,`data_id`,`group_id`,`content`,`md5`,`gmt_create`,`gmt_modified`,`src_user`,`src_ip`,`app_name`,`tenant_id`,`c_desc`,`c_use`,`effect`,`type`,`c_schema`,`encrypted_data_key`) values (2,'application-test.yml','DEFAULT_GROUP','appid: wx9ccd9a18a5567939\r\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\r\n\r\nbaidu:\r\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\r\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\r\n  \r\nfeign:\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 5000\r\n        loggerLevel: \'BASIC  \'\r\n        readTimeout: 5000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n      mime-types: text/xml,application/xml,application/json\r\n      min-request-size: 1024\r\n    response:\r\n      enabled: true\r\n  httpclient:\r\n    enabled: true\r\n    max-connections: 200\r\n    max-connections-per-route: 50\r\nmybatis:\r\n  configuration:\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n    map-underscore-to-camel-case: true\r\nmybatis-plus:\r\n  global-config:\r\n    db-column-underline: true\r\n    field-strategy: 1\r\n    id-type: 0\r\n  mapper-locations: classpath*:/mapper/*.xml\r\n\r\nserver:\r\n  error:\r\n    path: http://localhost:8098/user/error\r\n  port: 8098\r\n  servlet:\r\n    context-path: /user\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\r\n    username: root\r\n    password: masterroot\r\n  devtools:\r\n    restart:\r\n      enable: true\r\n  redis:\r\n    database: 0\r\n    host: 106.14.132.94\r\n    lettuce:\r\n      pool:\r\n        max-active: 32\r\n        max-idle: 16\r\n        min-idle: 8\r\n    password: redispassword\r\n    port: 63791\r\n\r\n','53605335a2c94bb5319c25ec0f961841','2024-01-27 13:46:52','2024-01-27 13:46:52',NULL,'124.232.28.4','','e470221b-f247-44f2-b2af-e2173c40ef98',NULL,NULL,NULL,'yaml',NULL,''),(44,'user-dev.yaml','RED_PACKAGE_RAIN_DEV_GROUP','appid: wx9ccd9a18a5567939  # 应用ID\nbaidu:  # 百度配置\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE  # 客户端ID\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B  # 客户端密钥\nfeign:  # Feign配置\n  client:  # 客户端配置\n    config:  # 配置\n      default:  # 默认配置\n        connectTimeout: 5000  # 连接超时时间\n        loggerLevel: \'BASIC  \'  # 日志级别\n        readTimeout: 5000  # 读取超时时间\n  compression:  # 压缩配置\n    request:  # 请求压缩配置\n      enabled: true  # 是否启用\n      mime-types: text/xml,application/xml,application/json  # MIME类型\n      min-request-size: 1024  # 最小请求大小\n    response:  # 响应压缩配置\n      enabled: true  # 是否启用\n  httpclient:  # HttpClient配置\n    enabled: true  # 是否启用\n    max-connections: 200  # 最大连接数\n    max-connections-per-route: 50  # 每个路由的最大连接数\nmybatis:  # MyBatis配置\n  configuration:  # 配置\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  # 日志实现类\n    map-underscore-to-camel-case: true  # 将下划线命名转换为驼峰命名\nmybatis-plus:  # MyBatis Plus配置\n  global-config:  # 全局配置\n    db-column-underline: true  # 数据库列是否使用下划线命名\n    field-strategy: 1  # 字段填充策略\n    id-type: 0  # ID类型\n  mapper-locations: classpath*:/mapper/*.xml  # Mapper文件路径\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec  # 密钥\nserver:  # 服务器配置\n  error:  # 错误配置\n    path: http://localhost:8098/user/error  # 错误路径\n  port: 8098  # 端口号\n  servlet:  # Servlet配置\n    context-path: /user  # 上下文路径\nspring:  # Spring配置\n  application:\n    #配置应用的名称，用于获取配置\n    name: user\n  datasource:  # 数据源配置\n    type: com.alibaba.druid.pool.DruidDataSource  # 数据源类型\n    driver-class-name: com.mysql.cj.jdbc.Driver  # JDBC驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8  # 数据库URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n  devtools:  # 开发工具配置\n    restart:  # 重启配置\n      enable: true  # 是否启用\n  redis:  # Redis配置\n    database: 0  # 数据库索引\n    host: 106.14.132.94  # 主机名\n    lettuce:  # Lettuce配置\n      pool:  # 连接池配置\n        max-active: 32  # 最大活跃连接数\n        max-idle: 16  # 最大空闲连接数\n        min-idle: 8  # 最小空闲连接数\n    password: redispassword  # Redis密码\n    port: 63791  # 端口号\n# 环境变量\nsecurity:\n  environment: http://127.0.0.1:8097','69a270009e478299c9e0f3b1a967e037','2024-02-22 11:50:18','2024-02-22 11:56:22',NULL,'223.147.237.67','开发环境','100df702-2100-4d18-ae40-e77eb60bd387','','','','yaml','',''),(46,'spring-cloud-security-oauth2-dev.yaml','RED_PACKAGE_RAIN_DEV_GROUP','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-security-oauth2\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  # 数据源配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n    # Hikari连接池配置\r\n    hikari:\r\n      minimum-idle: 5  # 最小空闲连接数\r\n      idle-timeout: 600000  # 连接空闲超时时间\r\n      maximum-pool-size: 10  # 连接池最大连接数\r\n      auto-commit: true  # 是否自动提交事务\r\n      pool-name: MyHikariCP  # 连接池名称\r\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\r\n      connection-timeout: 30000  # 连接超时时间\r\n      connection-test-query: SELECT 1  # 连接测试查询语句\r\nhost:\r\n  ip: 106.14.132.94\r\n# 认证配置\r\nauthjwt:\r\n    keyPairName: jwt.jks  # 密钥对文件名\r\n    keyPairAlias: jwt  # 密钥对别名\r\n    keyPairSecret: 123456  # 密钥对密码\r\n    keyPairStoreSecret: 123456  # 密钥对存储密码','0088ecaad78ce707331d7073c47dde4e','2024-02-22 11:57:42','2024-02-22 11:57:42',NULL,'223.147.237.67','开发环境','100df702-2100-4d18-ae40-e77eb60bd387',NULL,NULL,NULL,'yaml',NULL,''),(47,'spring-cloud-gateway-dev.yaml','RED_PACKAGE_RAIN_DEV_GROUP','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8087\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  gateway:\r\n    filters:\r\n      -name: RequestRateLimiter\r\n        args:\r\n          redis-rate-limiter.replenishRate: 10 # 令牌桶每秒填充平均速率\r\n          redis-rate-limiter.burstCapacity: 20 # 令牌桶的上限\r\n          key-resolver: \"#{@userKeyResolver}\" #使用SpEL表达式从Spring容器中获取Bean对象\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-gateway\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n# 环境变量\r\nenvironment: http://106.14.132.94:8097\r\n# 网关鉴权\r\nauth:\r\n  gateway:\r\n    # 跳过过滤\r\n    shouldSkipUrls:\r\n      - /user/**\r\n','a098209fb2afea2c05c647ef45fcba2a','2024-02-22 11:58:34','2024-02-22 11:58:34',NULL,'223.147.237.67','开发环境','100df702-2100-4d18-ae40-e77eb60bd387',NULL,NULL,NULL,'yaml',NULL,''),(48,'red-package-rain-server-dev.yaml','RED_PACKAGE_RAIN_DEV_GROUP','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8067\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 192.168.80.101:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup','4c6c9df820bb18e8d03f089db00701a6','2024-02-22 11:59:16','2024-02-22 11:59:16',NULL,'223.147.237.67','开发环境','100df702-2100-4d18-ae40-e77eb60bd387',NULL,NULL,NULL,'yaml',NULL,''),(49,'red-package-rain-api-dev.yaml','RED_PACKAGE_RAIN_DEV_GROUP','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8057\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 106.14.132.94:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup\r\nfile:\r\n  path: /opt/app/redpackagerain/api\r\nresilience4j:\r\n  retry: # 重试策略机制配置\r\n    instances: # 定义多个重试策略实例\r\n      retryApi: # 第一个重试策略重试名称\r\n        max-attempts: 3 # 操作失败最大重试次数为3\r\n        wait-duration: 1s # 每次重试等待时间1秒\r\n  circuitbreaker:\r\n    instances: # 定义多个断路器实例\r\n      circuitBreakerApi: # 第一个断路器实例名称\r\n        registerHealthIndicator: true # 配置健康指示器\r\n        slidingWindowSize: 10 # 滑动窗口大小\r\n        minimumNumberOfCalls: 5 # 最小调用次数\r\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\r\n        slidingWindowType: TIME_BASED # 滑动窗口类型\r\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\r\n        waitDurationInOpenState: 1s # 开启状态下等待时间\r\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\r\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\r\n        ignoreExceptions: # 忽略的异常列表\r\n          - java.io.IOException\r\n  ratelimiter:\r\n    instances: # 定义多个限流策略实例\r\n      rateLimiterApi: # 第一个限流策略实例名称\r\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\r\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\r\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\r\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\r\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\r\n\r\n','bfeed79264a297c4bc6c84c85f7a72f3','2024-02-22 12:01:17','2024-02-22 12:01:17',NULL,'223.147.237.67','开发环境','100df702-2100-4d18-ae40-e77eb60bd387',NULL,NULL,NULL,'yaml',NULL,''),(50,'nacos.cfg.dataIdfoo','foo','helloWorld','1a833da63a6b7e20098dae06d06602e1','2024-02-25 21:00:34','2024-02-25 21:59:00',NULL,'222.112.82.141','','',NULL,NULL,NULL,'text',NULL,''),(56,'spring-cloud-security-oauth2-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-security-oauth2\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  # 数据源配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n    # Hikari连接池配置\r\n    hikari:\r\n      minimum-idle: 5  # 最小空闲连接数\r\n      idle-timeout: 600000  # 连接空闲超时时间\r\n      maximum-pool-size: 10  # 连接池最大连接数\r\n      auto-commit: true  # 是否自动提交事务\r\n      pool-name: MyHikariCP  # 连接池名称\r\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\r\n      connection-timeout: 30000  # 连接超时时间\r\n      connection-test-query: SELECT 1  # 连接测试查询语句\r\nhost:\r\n  ip: 127.0.0.1\r\n# 认证配置\r\nauthjwt:\r\n    keyPairName: jwt.jks  # 密钥对文件名\r\n    keyPairAlias: jwt  # 密钥对别名\r\n    keyPairSecret: 123456  # 密钥对密码\r\n    keyPairStoreSecret: 123456  # 密钥对存储密码','9282d2fae844512d911a1249d3e7fadc','2024-02-26 13:36:16','2024-02-26 13:36:16',NULL,'223.147.218.135','红包雨','21c790b2-0b30-4433-a030-245f17203d2f',NULL,NULL,NULL,'yaml',NULL,''),(57,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8087\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  gateway:\n    discovery:\n      locator:\n        # gateway可以通过开启以下配置来打开根据服务的serviceId来匹配路由,默认是大写\n        enabled: true\n    routes:\n      - id: provider1\n        uri: lb://user\n        predicates:\n          - Path=/user/**\n        filters:\n          - name: RequestRateLimiter\n          - args:\n             # 令牌桶每秒填充平均速率\n             redis-rate-limiter.replenishRate: 10\n             # 令牌桶的上限\n             redis-rate-limiter.burstCapacity: 20\n             #使用SpEL表达式从Spring容器中获取Bean对象\n             key-resolver: \"#{@userKeyResolver}\"\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.111:6371,192.168.80.111:6372,192.168.80.111:6373,192.168.80.111:6374,192.168.80.111:6375,192.168.80.111:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n# 环境变量\nenvironment: http://127.0.0.1:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/**\n','f84d42b1ad495125453dad5fb54dd9ac','2024-02-26 13:39:35','2024-02-26 23:26:39',NULL,'223.147.218.135','本地环境','21c790b2-0b30-4433-a030-245f17203d2f','','','','yaml','',''),(59,'red-package-rain-api-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8057\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: red-package-rain-api\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n  rocketmq:\n    # RocketMQ的名称服务器地址和端口号\n    name-server: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n    producer:\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\n      group: RedPackageRainGroup\nfilepath: D://opt\nresilience4j:\n  retry: # 重试策略机制配置\n    instances: # 定义多个重试策略实例\n      retryApi: # 第一个重试策略重试名称\n        max-attempts: 3 # 操作失败最大重试次数为3\n        wait-duration: 1s # 每次重试等待时间1秒\n  circuitbreaker:\n    instances: # 定义多个断路器实例\n      circuitBreakerApi: # 第一个断路器实例名称\n        registerHealthIndicator: true # 配置健康指示器\n        slidingWindowSize: 10 # 滑动窗口大小\n        minimumNumberOfCalls: 5 # 最小调用次数\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\n        slidingWindowType: TIME_BASED # 滑动窗口类型\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\n        waitDurationInOpenState: 1s # 开启状态下等待时间\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        ignoreExceptions: # 忽略的异常列表\n          - java.io.IOException\n  ratelimiter:\n    instances: # 定义多个限流策略实例\n      rateLimiterApi: # 第一个限流策略实例名称\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\n        subscribeForEvents: true # 订阅事件类型\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n\n','471963e173b242a9d190d7bf48e5eb5f','2024-02-26 13:45:23','2024-02-28 13:27:06',NULL,'223.153.87.140','本地环境','21c790b2-0b30-4433-a030-245f17203d2f','','','','yaml','',''),(60,'red-package-rain-server-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8067\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\nrocketmq:\n  # RocketMQ的名称服务器地址和端口号\n  nameServer: 192.168.80.102:30913;192.168.80.101:30913;192.168.80.103:30913;192.168.80.102:30912;192.168.80.101:30912;192.168.80.103:30912;192.168.80.102:30911;192.168.80.101:30911;192.168.80.103:30911\n#  nameServer: 192.168.80.102:30913\n  producer:\n    # Producer（消息生产者）的分组名称为RedPackageRainGroup\n    group: RedPackageRainGroup','9f628cf76e6c24f0ce79ce26626118bf','2024-02-26 13:47:32','2024-02-28 13:43:33',NULL,'223.153.87.140','本地环境','21c790b2-0b30-4433-a030-245f17203d2f','','','','yaml','',''),(61,'user-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','spring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\n    username: root\n    password: masterroot\n  devtools:\n    restart:\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n# 服务端口\nserver:\n  port: 8077\n  error:\n    path: http://localhost:8098/user/error\n  servlet:\n    context-path: /user\nappid: wx9ccd9a18a5567939\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\nbaidu:\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000\n        loggerLevel: \'BASIC  \'\n        readTimeout: 5000\n  compression:\n    request:\n      enabled: true\n      mime-types: text/xml,application/xml,application/json\n      min-request-size: 1024\n    response:\n      enabled: true\n  httpclient:\n    enabled: true\n    max-connections: 200\n    max-connections-per-route: 50\nmybatis:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\nmybatis-plus:\n  global-config:\n    db-column-underline: true\n    field-strategy: 1\n    id-type: 0\n  mapper-locations: classpath*:/mapper/*.xml\n# 环境变量\nsecurity:\n  environment: http://127.0.0.1:8097','4c5bb2681baecd691929ba58361e4580','2024-02-26 13:49:15','2024-02-28 13:46:36',NULL,'223.153.87.140','本地环境','21c790b2-0b30-4433-a030-245f17203d2f','','','','yaml','','');

/*Table structure for table `config_info_aggr` */

DROP TABLE IF EXISTS `config_info_aggr`;

CREATE TABLE `config_info_aggr` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'datum_id',
  `content` longtext COLLATE utf8_bin NOT NULL COMMENT '内容',
  `gmt_modified` datetime NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='增加租户字段';

/*Data for the table `config_info_aggr` */

/*Table structure for table `config_info_beta` */

DROP TABLE IF EXISTS `config_info_beta`;

CREATE TABLE `config_info_beta` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext COLLATE utf8_bin NOT NULL COMMENT 'content',
  `beta_ips` varchar(1024) COLLATE utf8_bin DEFAULT NULL COMMENT 'betaIps',
  `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
  `src_user` text COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  `encrypted_data_key` text COLLATE utf8_bin NOT NULL COMMENT '密钥',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_beta';

/*Data for the table `config_info_beta` */

/*Table structure for table `config_info_tag` */

DROP TABLE IF EXISTS `config_info_tag`;

CREATE TABLE `config_info_tag` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `tag_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'tag_id',
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
  `src_user` text COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_tag';

/*Data for the table `config_info_tag` */

/*Table structure for table `config_tags_relation` */

DROP TABLE IF EXISTS `config_tags_relation`;

CREATE TABLE `config_tags_relation` (
  `id` bigint NOT NULL COMMENT 'id',
  `tag_name` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) COLLATE utf8_bin DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`),
  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_tag_relation';

/*Data for the table `config_tags_relation` */

/*Table structure for table `group_capacity` */

DROP TABLE IF EXISTS `group_capacity`;

CREATE TABLE `group_capacity` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
  `quota` int unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',
  `max_aggr_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='集群、各Group容量信息表';

/*Data for the table `group_capacity` */

/*Table structure for table `his_config_info` */

DROP TABLE IF EXISTS `his_config_info`;

CREATE TABLE `his_config_info` (
  `id` bigint unsigned NOT NULL,
  `nid` bigint unsigned NOT NULL AUTO_INCREMENT,
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL,
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL,
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext COLLATE utf8_bin NOT NULL,
  `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL,
  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00',
  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00',
  `src_user` text COLLATE utf8_bin,
  `src_ip` varchar(20) COLLATE utf8_bin DEFAULT NULL,
  `op_type` char(10) COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  `encrypted_data_key` varchar(255) COLLATE utf8_bin DEFAULT 'default_value',
  PRIMARY KEY (`nid`),
  KEY `idx_gmt_create` (`gmt_create`),
  KEY `idx_gmt_modified` (`gmt_modified`),
  KEY `idx_did` (`data_id`)
) ENGINE=InnoDB AUTO_INCREMENT=102 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='多租户改造';

/*Data for the table `his_config_info` */

insert  into `his_config_info`(`id`,`nid`,`data_id`,`group_id`,`app_name`,`content`,`md5`,`gmt_create`,`gmt_modified`,`src_user`,`src_ip`,`op_type`,`tenant_id`,`encrypted_data_key`) values (0,5,'gateway-dev.yml','RED_PACKAGE_RAIN_API_GROUP','','## 为了方便大家查看配置，这里基本会把配置用文件的形式记录下来，没有配置到nacos里面\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 2048\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。建议设置为 2 倍到 4 倍的 QPS\r\n      max: 40000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 20\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。建议设置为 2 倍到 4 倍的 QPS。如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 40000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 80000\r\nspring:\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  profiles:\r\n    # 配置文件的前缀，默认是application.name的值，如果配了prefix，就取prefix的值。开发环境dev，测试环境test，生产环境prod。\r\n    # nacos会根据当前环境去拼接配置名称查找相应配置文件，示例：{spring.application.name}-{spring.profiles.active}-{spring.cloud.nacos.config.file-extension}，获取到值：nacos-config-dev.yml\r\n    active: dev\r\n  application:\r\n    # 配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    database: 0\r\n    host: 106.14.132.94\r\n    lettuce:\r\n      pool:\r\n        max-active: 32\r\n        max-idle: 16\r\n        min-idle: 8\r\n    password: redispassword\r\n    port: 63791\r\napplication_key: iA0`bN0&lK0_H0(\r\nenvironment: local\r\nauth:\r\n  gateway:\r\n    shouldSkipUrls:\r\n      - /user/xx\r\n      - /xx/xx\r\n','bd210361c69e6fea547f452fa7843556','2010-05-05 00:00:00','2024-01-30 12:06:13',NULL,'223.147.235.22','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(4,6,'gateway-dev.yml','RED_PACKAGE_RAIN_API_GROUP','','## 为了方便大家查看配置，这里基本会把配置用文件的形式记录下来，没有配置到nacos里面\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 2048\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。建议设置为 2 倍到 4 倍的 QPS\r\n      max: 40000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 20\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。建议设置为 2 倍到 4 倍的 QPS。如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 40000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 80000\r\nspring:\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  profiles:\r\n    # 配置文件的前缀，默认是application.name的值，如果配了prefix，就取prefix的值。开发环境dev，测试环境test，生产环境prod。\r\n    # nacos会根据当前环境去拼接配置名称查找相应配置文件，示例：{spring.application.name}-{spring.profiles.active}-{spring.cloud.nacos.config.file-extension}，获取到值：nacos-config-dev.yml\r\n    active: dev\r\n  application:\r\n    # 配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    database: 0\r\n    host: 106.14.132.94\r\n    lettuce:\r\n      pool:\r\n        max-active: 32\r\n        max-idle: 16\r\n        min-idle: 8\r\n    password: redispassword\r\n    port: 63791\r\napplication_key: iA0`bN0&lK0_H0(\r\nenvironment: local\r\nauth:\r\n  gateway:\r\n    shouldSkipUrls:\r\n      - /user/xx\r\n      - /xx/xx\r\n','bd210361c69e6fea547f452fa7843556','2010-05-05 00:00:00','2024-01-30 12:06:48',NULL,'223.147.235.22','U','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,7,'oauth2-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','server:\r\n  port: 8807\r\nspring:\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8\r\n    username: root\r\n    password: masterroot\r\n    hikari:\r\n      minimum-idle: 5\r\n      idle-timeout: 600000\r\n      maximum-pool-size: 10\r\n      auto-commit: true\r\n      pool-name: MyHikariCP\r\n      max-lifetime: 3000000  #连接最大存活时间,默认值30分钟.设置应该比mysql设置的超时时间短\r\n      connection-timeout: 30000\r\n      connection-test-query: SELECT 1 #连接测试查询\r\n    redis:\r\n      database: 0\r\n      host: 106.14.132.94\r\n      lettuce:\r\n        pool:\r\n          max-active: 32\r\n          max-idle: 16\r\n          min-idle: 8\r\n      password: redispassword\r\n      port: 63791\r\n  auth:\r\n    jwt:\r\n      keyPairName: jwt.jks\r\n      keyPairAlias: jwt\r\n      keyPairSecret: 123456\r\n      keyPairStoreSecret: 123456','1cb23ca7bdc93f20389521cdd6722cf2','2010-05-05 00:00:00','2024-01-30 12:09:03',NULL,'223.147.235.22','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,8,'red-package-rain-api-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，对于一个8核心16线程的服务器，理论上的最大线程数可能接近32000（8核心 * 4000线程/核心）。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 192.168.80.100\r\n    # 密码\r\n    password: admin\r\n    # 端口\r\n    port: 6379\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 192.168.80.101:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup\r\nfile:\r\n  path: D://opt\r\nresilience4j:\r\n  retry: # 重试策略机制配置\r\n    instances: # 定义多个重试策略实例\r\n      retryApi: # 第一个重试策略重试名称\r\n        max-attempts: 3 # 操作失败最大重试次数为3\r\n        wait-duration: 1s # 每次重试等待时间1秒\r\n  circuitbreaker:\r\n    instances: # 定义多个断路器实例\r\n      circuitBreakerApi: # 第一个断路器实例名称\r\n        registerHealthIndicator: true # 配置健康指示器\r\n        slidingWindowSize: 10 # 滑动窗口大小\r\n        minimumNumberOfCalls: 5 # 最小调用次数\r\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\r\n        slidingWindowType: TIME_BASED # 滑动窗口类型\r\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\r\n        waitDurationInOpenState: 1s # 开启状态下等待时间\r\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\r\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\r\n        ignoreExceptions: # 忽略的异常列表\r\n          - java.io.IOException\r\n  ratelimiter:\r\n    instances: # 定义多个限流策略实例\r\n      rateLimiterApi: # 第一个限流策略实例名称\r\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\r\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\r\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\r\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\r\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\r\n\r\n','52db5234a155f623da19b5da14c1f2b5','2010-05-05 00:00:00','2024-01-30 12:59:27',NULL,'223.147.235.22','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,9,'spring-cloud-gateway-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-gateway\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n# 环境变量\r\nenvironment: 106.14.132.94\r\nauth:\r\n  gateway:\r\n    # 跳过过滤\r\n    shouldSkipUrls:\r\n      - /user/xx\r\n      - /xx/xx\r\n','215c7d919ded71c1db8cd8623140d529','2010-05-05 00:00:00','2024-01-30 13:13:32',NULL,'223.147.235.22','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(4,10,'gateway-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','## 为了方便大家查看配置，这里基本会把配置用文件的形式记录下来，没有配置到nacos里面\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 2048\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。建议设置为 2 倍到 4 倍的 QPS\n      max: 40000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 20\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。建议设置为 2 倍到 4 倍的 QPS。如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 40000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 80000\nspring:\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  profiles:\n    # 配置文件的前缀，默认是application.name的值，如果配了prefix，就取prefix的值。开发环境dev，测试环境test，生产环境prod。\n    # nacos会根据当前环境去拼接配置名称查找相应配置文件，示例：{spring.application.name}-{spring.profiles.active}-{spring.cloud.nacos.config.file-extension}，获取到值：nacos-config-dev.yml\n    active: dev\n  application:\n    # 配置应用的名称，用于获取配置\n    name: red-package-rain-api\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    database: 0\n    host: 106.14.132.94\n    lettuce:\n      pool:\n        max-active: 32\n        max-idle: 16\n        min-idle: 8\n    password: redispassword\n    port: 63791\napplication_key: iA0`bN0&lK0_H0(\nenvironment: local\nauth:\n  gateway:\n    shouldSkipUrls:\n      - /user/xx\n      - /xx/xx\n','abcc4dd62f034f17052b1f0e1b6aab41','2010-05-05 00:00:00','2024-01-30 13:13:37',NULL,'223.147.235.22','D','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,11,'spring-cloud-security-oauth2-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-security-oauth2\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  # 数据源配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n    # Hikari连接池配置\r\n    hikari:\r\n      minimum-idle: 5  # 最小空闲连接数\r\n      idle-timeout: 600000  # 连接空闲超时时间\r\n      maximum-pool-size: 10  # 连接池最大连接数\r\n      auto-commit: true  # 是否自动提交事务\r\n      pool-name: MyHikariCP  # 连接池名称\r\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\r\n      connection-timeout: 30000  # 连接超时时间\r\n      connection-test-query: SELECT 1  # 连接测试查询语句\r\n  # 认证配置\r\n  auth:\r\n    jwt:\r\n      keyPairName: jwt.jks  # 密钥对文件名\r\n      keyPairAlias: jwt  # 密钥对别名\r\n      keyPairSecret: 123456  # 密钥对密码\r\n      keyPairStoreSecret: 123456  # 密钥对存储密码','91b43edf9b2c0418c12b0495620bb6cf','2010-05-05 00:00:00','2024-01-30 13:32:20',NULL,'223.147.235.22','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(6,12,'oauth2-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','server:\r\n  port: 8807\r\nspring:\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8\r\n    username: root\r\n    password: masterroot\r\n    hikari:\r\n      minimum-idle: 5\r\n      idle-timeout: 600000\r\n      maximum-pool-size: 10\r\n      auto-commit: true\r\n      pool-name: MyHikariCP\r\n      max-lifetime: 3000000  #连接最大存活时间,默认值30分钟.设置应该比mysql设置的超时时间短\r\n      connection-timeout: 30000\r\n      connection-test-query: SELECT 1 #连接测试查询\r\n    redis:\r\n      database: 0\r\n      host: 106.14.132.94\r\n      lettuce:\r\n        pool:\r\n          max-active: 32\r\n          max-idle: 16\r\n          min-idle: 8\r\n      password: redispassword\r\n      port: 63791\r\n  auth:\r\n    jwt:\r\n      keyPairName: jwt.jks\r\n      keyPairAlias: jwt\r\n      keyPairSecret: 123456\r\n      keyPairStoreSecret: 123456','1cb23ca7bdc93f20389521cdd6722cf2','2010-05-05 00:00:00','2024-01-30 13:32:25',NULL,'223.147.235.22','D','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,13,'red-package-rain-server-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 192.168.80.101:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup','68020a8bbbd5d4f5a3834581b8890d34','2010-05-05 00:00:00','2024-01-30 13:32:58',NULL,'223.147.235.22','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,14,'user-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','appid: wx9ccd9a18a5567939  # 应用ID\r\nbaidu:  # 百度配置\r\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE  # 客户端ID\r\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B  # 客户端密钥\r\nfeign:  # Feign配置\r\n  client:  # 客户端配置\r\n    config:  # 配置\r\n      default:  # 默认配置\r\n        connectTimeout: 5000  # 连接超时时间\r\n        loggerLevel: \'BASIC  \'  # 日志级别\r\n        readTimeout: 5000  # 读取超时时间\r\n  compression:  # 压缩配置\r\n    request:  # 请求压缩配置\r\n      enabled: true  # 是否启用\r\n      mime-types: text/xml,application/xml,application/json  # MIME类型\r\n      min-request-size: 1024  # 最小请求大小\r\n    response:  # 响应压缩配置\r\n      enabled: true  # 是否启用\r\n  httpclient:  # HttpClient配置\r\n    enabled: true  # 是否启用\r\n    max-connections: 200  # 最大连接数\r\n    max-connections-per-route: 50  # 每个路由的最大连接数\r\nmybatis:  # MyBatis配置\r\n  configuration:  # 配置\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  # 日志实现类\r\n    map-underscore-to-camel-case: true  # 将下划线命名转换为驼峰命名\r\nmybatis-plus:  # MyBatis Plus配置\r\n  global-config:  # 全局配置\r\n    db-column-underline: true  # 数据库列是否使用下划线命名\r\n    field-strategy: 1  # 字段填充策略\r\n    id-type: 0  # ID类型\r\n  mapper-locations: classpath*:/mapper/*.xml  # Mapper文件路径\r\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec  # 密钥\r\nserver:  # 服务器配置\r\n  error:  # 错误配置\r\n    path: http://localhost:8098/user/error  # 错误路径\r\n  port: 8098  # 端口号\r\n  servlet:  # Servlet配置\r\n    context-path: /user  # 上下文路径\r\nspring:  # Spring配置\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: user\r\n  datasource:  # 数据源配置\r\n    type: com.alibaba.druid.pool.DruidDataSource  # 数据源类型\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # JDBC驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8  # 数据库URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n  devtools:  # 开发工具配置\r\n    restart:  # 重启配置\r\n      enable: true  # 是否启用\r\n  redis:  # Redis配置\r\n    database: 0  # 数据库索引\r\n    host: 106.14.132.94  # 主机名\r\n    lettuce:  # Lettuce配置\r\n      pool:  # 连接池配置\r\n        max-active: 32  # 最大活跃连接数\r\n        max-idle: 16  # 最大空闲连接数\r\n        min-idle: 8  # 最小空闲连接数\r\n    password: redispassword  # Redis密码\r\n    port: 63791  # 端口号','7b922151c3a6e77bdfc195359a755889','2010-05-05 00:00:00','2024-01-30 13:33:38',NULL,'223.147.235.22','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(9,15,'spring-cloud-security-oauth2-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-security-oauth2\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  # 数据源配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n    # Hikari连接池配置\r\n    hikari:\r\n      minimum-idle: 5  # 最小空闲连接数\r\n      idle-timeout: 600000  # 连接空闲超时时间\r\n      maximum-pool-size: 10  # 连接池最大连接数\r\n      auto-commit: true  # 是否自动提交事务\r\n      pool-name: MyHikariCP  # 连接池名称\r\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\r\n      connection-timeout: 30000  # 连接超时时间\r\n      connection-test-query: SELECT 1  # 连接测试查询语句\r\n  # 认证配置\r\n  auth:\r\n    jwt:\r\n      keyPairName: jwt.jks  # 密钥对文件名\r\n      keyPairAlias: jwt  # 密钥对别名\r\n      keyPairSecret: 123456  # 密钥对密码\r\n      keyPairStoreSecret: 123456  # 密钥对存储密码','91b43edf9b2c0418c12b0495620bb6cf','2010-05-05 00:00:00','2024-01-30 13:37:20',NULL,'223.147.235.22','U','100df702-2100-4d18-ae40-e77eb60bd387',''),(9,16,'spring-cloud-security-oauth2-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-security-oauth2\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n    # Hikari连接池配置\n    hikari:\n      minimum-idle: 5  # 最小空闲连接数\n      idle-timeout: 600000  # 连接空闲超时时间\n      maximum-pool-size: 10  # 连接池最大连接数\n      auto-commit: true  # 是否自动提交事务\n      pool-name: MyHikariCP  # 连接池名称\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\n      connection-timeout: 30000  # 连接超时时间\n      connection-test-query: SELECT 1  # 连接测试查询语句\n# 认证配置\nauth:\n  jwt:\n    keyPairName: jwt.jks  # 密钥对文件名\n    keyPairAlias: jwt  # 密钥对别名\n    keyPairSecret: 123456  # 密钥对密码\n    keyPairStoreSecret: 123456  # 密钥对存储密码','21cb94a4d8ec20e24c4b1147d250973f','2010-05-05 00:00:00','2024-01-30 13:44:25',NULL,'223.147.235.22','U','100df702-2100-4d18-ae40-e77eb60bd387',''),(9,17,'spring-cloud-security-oauth2-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-security-oauth2\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n    # Hikari连接池配置\n    hikari:\n      minimum-idle: 5  # 最小空闲连接数\n      idle-timeout: 600000  # 连接空闲超时时间\n      maximum-pool-size: 10  # 连接池最大连接数\n      auto-commit: true  # 是否自动提交事务\n      pool-name: MyHikariCP  # 连接池名称\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\n      connection-timeout: 30000  # 连接超时时间\n      connection-test-query: SELECT 1  # 连接测试查询语句\nhost:\n  ip: 127.0.0.1      \n# 认证配置\nauth:\n  jwt:\n    keyPairName: jwt.jks  # 密钥对文件名\n    keyPairAlias: jwt  # 密钥对别名\n    keyPairSecret: 123456  # 密钥对密码\n    keyPairStoreSecret: 123456  # 密钥对存储密码','02589028fb924ed3ab97a0d31ed05629','2010-05-05 00:00:00','2024-01-30 13:45:51',NULL,'223.147.235.22','U','100df702-2100-4d18-ae40-e77eb60bd387',''),(9,18,'spring-cloud-security-oauth2-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-security-oauth2\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n    # Hikari连接池配置\n    hikari:\n      minimum-idle: 5  # 最小空闲连接数\n      idle-timeout: 600000  # 连接空闲超时时间\n      maximum-pool-size: 10  # 连接池最大连接数\n      auto-commit: true  # 是否自动提交事务\n      pool-name: MyHikariCP  # 连接池名称\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\n      connection-timeout: 30000  # 连接超时时间\n      connection-test-query: SELECT 1  # 连接测试查询语句\nhost:\n  ip: 127.0.0.1      \n# 认证配置\nauthjwt:\n  keyPairName: jwt.jks  # 密钥对文件名\n  keyPairAlias: jwt  # 密钥对别名\n  keyPairSecret: 123456  # 密钥对密码\n  keyPairStoreSecret: 123456  # 密钥对存储密码','a7a08ab79db6ec67952afa67e4961413','2010-05-05 00:00:00','2024-01-30 13:46:56',NULL,'223.147.235.22','U','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,19,'spring-cloud-security-oauth2-dev.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-security-oauth2\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  # 数据源配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n    # Hikari连接池配置\r\n    hikari:\r\n      minimum-idle: 5  # 最小空闲连接数\r\n      idle-timeout: 600000  # 连接空闲超时时间\r\n      maximum-pool-size: 10  # 连接池最大连接数\r\n      auto-commit: true  # 是否自动提交事务\r\n      pool-name: MyHikariCP  # 连接池名称\r\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\r\n      connection-timeout: 30000  # 连接超时时间\r\n      connection-test-query: SELECT 1  # 连接测试查询语句\r\nhost:\r\n  ip: 127.0.0.1\r\n# 认证配置\r\nauthjwt:\r\n  keyPairName: jwt.jks  # 密钥对文件名\r\n  keyPairAlias: jwt  # 密钥对别名\r\n  keyPairSecret: 123456  # 密钥对密码\r\n  keyPairStoreSecret: 123456  # 密钥对存储密码','da9dd4679329c56f59ffeb66d429ec06','2010-05-05 00:00:00','2024-01-30 14:04:20',NULL,'223.147.235.22','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(9,20,'spring-cloud-security-oauth2-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-security-oauth2\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n    # Hikari连接池配置\n    hikari:\n      minimum-idle: 5  # 最小空闲连接数\n      idle-timeout: 600000  # 连接空闲超时时间\n      maximum-pool-size: 10  # 连接池最大连接数\n      auto-commit: true  # 是否自动提交事务\n      pool-name: MyHikariCP  # 连接池名称\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\n      connection-timeout: 30000  # 连接超时时间\n      connection-test-query: SELECT 1  # 连接测试查询语句\nhost:\n  ip: 127.0.0.1      \n# 认证配置\nauth:\n  jwt:\n    keyPairName: jwt.jks  # 密钥对文件名\n    keyPairAlias: jwt  # 密钥对别名\n    keyPairSecret: 123456  # 密钥对密码\n    keyPairStoreSecret: 123456  # 密钥对存储密码','02589028fb924ed3ab97a0d31ed05629','2010-05-05 00:00:00','2024-01-30 14:07:29',NULL,'223.147.235.22','D','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,21,'spring-cloud-security-oauth-dev.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-security-oauth2\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  # 数据源配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n    # Hikari连接池配置\r\n    hikari:\r\n      minimum-idle: 5  # 最小空闲连接数\r\n      idle-timeout: 600000  # 连接空闲超时时间\r\n      maximum-pool-size: 10  # 连接池最大连接数\r\n      auto-commit: true  # 是否自动提交事务\r\n      pool-name: MyHikariCP  # 连接池名称\r\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\r\n      connection-timeout: 30000  # 连接超时时间\r\n      connection-test-query: SELECT 1  # 连接测试查询语句\r\nhost:\r\n  ip: 127.0.0.1\r\n# 认证配置\r\nauthjwt:\r\n  keyPairName: jwt.jks  # 密钥对文件名\r\n  keyPairAlias: jwt  # 密钥对别名\r\n  keyPairSecret: 123456  # 密钥对密码\r\n  keyPairStoreSecret: 123456  # 密钥对存储密码','da9dd4679329c56f59ffeb66d429ec06','2010-05-05 00:00:00','2024-01-30 14:13:20',NULL,'223.147.235.22','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(17,22,'spring-cloud-security-oauth-dev.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-security-oauth2\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  # 数据源配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n    # Hikari连接池配置\r\n    hikari:\r\n      minimum-idle: 5  # 最小空闲连接数\r\n      idle-timeout: 600000  # 连接空闲超时时间\r\n      maximum-pool-size: 10  # 连接池最大连接数\r\n      auto-commit: true  # 是否自动提交事务\r\n      pool-name: MyHikariCP  # 连接池名称\r\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\r\n      connection-timeout: 30000  # 连接超时时间\r\n      connection-test-query: SELECT 1  # 连接测试查询语句\r\nhost:\r\n  ip: 127.0.0.1\r\n# 认证配置\r\nauthjwt:\r\n  keyPairName: jwt.jks  # 密钥对文件名\r\n  keyPairAlias: jwt  # 密钥对别名\r\n  keyPairSecret: 123456  # 密钥对密码\r\n  keyPairStoreSecret: 123456  # 密钥对存储密码','da9dd4679329c56f59ffeb66d429ec06','2010-05-05 00:00:00','2024-01-30 14:23:27',NULL,'223.147.235.22','D','100df702-2100-4d18-ae40-e77eb60bd387',''),(16,23,'spring-cloud-security-oauth2-dev.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-security-oauth2\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  # 数据源配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n    # Hikari连接池配置\r\n    hikari:\r\n      minimum-idle: 5  # 最小空闲连接数\r\n      idle-timeout: 600000  # 连接空闲超时时间\r\n      maximum-pool-size: 10  # 连接池最大连接数\r\n      auto-commit: true  # 是否自动提交事务\r\n      pool-name: MyHikariCP  # 连接池名称\r\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\r\n      connection-timeout: 30000  # 连接超时时间\r\n      connection-test-query: SELECT 1  # 连接测试查询语句\r\nhost:\r\n  ip: 127.0.0.1\r\n# 认证配置\r\nauthjwt:\r\n  keyPairName: jwt.jks  # 密钥对文件名\r\n  keyPairAlias: jwt  # 密钥对别名\r\n  keyPairSecret: 123456  # 密钥对密码\r\n  keyPairStoreSecret: 123456  # 密钥对存储密码','da9dd4679329c56f59ffeb66d429ec06','2010-05-05 00:00:00','2024-02-15 12:51:25',NULL,'223.153.70.74','U','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,24,'spring-cloud-gateway-dev.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-gateway\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n# 环境变量\r\nenvironment: 106.14.132.94\r\n# 网关鉴权\r\nauth:\r\n  gateway:\r\n    # 跳过过滤\r\n    shouldSkipUrls:\r\n      - /user/xx\r\n      - /xx/xx\r\n','014ef75f94c3b67f012328a011e7f362','2010-05-05 00:00:00','2024-02-15 12:59:52',NULL,'223.153.70.74','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(8,25,'spring-cloud-gateway-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-gateway\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n# 环境变量\r\nenvironment: 106.14.132.94\r\nauth:\r\n  gateway:\r\n    # 跳过过滤\r\n    shouldSkipUrls:\r\n      - /user/xx\r\n      - /xx/xx\r\n','215c7d919ded71c1db8cd8623140d529','2010-05-05 00:00:00','2024-02-15 13:00:02',NULL,'223.153.70.74','D','100df702-2100-4d18-ae40-e77eb60bd387',''),(3,26,'application-local.yml','DEFAULT_GROUP','','appid: wx9ccd9a18a5567939\r\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\r\nbaidu:\r\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\r\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\r\nfeign:\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 5000\r\n        loggerLevel: \'BASIC  \'\r\n        readTimeout: 5000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n      mime-types: text/xml,application/xml,application/json\r\n      min-request-size: 1024\r\n    response:\r\n      enabled: true\r\n  httpclient:\r\n    enabled: true\r\n    max-connections: 200\r\n    max-connections-per-route: 50\r\nmybatis:\r\n  configuration:\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n    map-underscore-to-camel-case: true\r\nmybatis-plus:\r\n  global-config:\r\n    db-column-underline: true\r\n    field-strategy: 1\r\n    id-type: 0\r\n  mapper-locations: classpath*:/mapper/*.xml\r\n\r\nserver:\r\n  error:\r\n    path: http://localhost:8098/user/error\r\n  port: 8098\r\n  servlet:\r\n    context-path: /user\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://192.168.80.111:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\r\n    username: root\r\n    password: masterroot\r\n  devtools:\r\n    restart:\r\n      enable: true\r\n  redis:\r\n    database: 0\r\n    host: 192.168.80.121\r\n    lettuce:\r\n      pool:\r\n        max-active: 32\r\n        max-idle: 16\r\n        min-idle: 8\r\n    password: redispassword\r\n    port: 6379\r\n','b2bc1606d1fe6696e31fc684fec29b23','2010-05-05 00:00:00','2024-02-15 13:04:41',NULL,'223.153.70.74','D','21c790b2-0b30-4433-a030-245f17203d2f',''),(0,27,'spring-cloud-security-oauth2-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# bootstrap.yml优先级比application.yml优先级高\r\nspring:\r\n  # prefix-{spring.profile.active}.${file-extension}\r\n  # Nacos会根据当前环境去拼接配置名称查找相应配置文件，\r\n  # 示例：{spring.application.name}-{spring.profiles.active}-{spring.cloud.nacos.config.file-extension}\r\n  # 获取到值：spring-cloud-security-oauth2-dev.yaml\r\n  # Nacos会根据当前环境和file-extension参数去拼接配置文件名称\r\n  profiles:\r\n    # 本地环境local，开发环境dev，测试环境test，生产环境prod\r\n    # 当前活动的配置文件为dev\r\n    active: local\r\n    # 应用名称\r\n  application:\r\n    name: spring-cloud-security-oauth2\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        # 服务注册地址\r\n        server-addr: 106.14.132.94:8848\r\n      config:\r\n        #nacos配置中心地址\r\n        server-addr: 106.14.132.94:8848\r\n        #配置中心的命名空间id\r\n        namespace: 100df702-2100-4d18-ae40-e77eb60bd387\r\n        #配置分组，默认没有也可以\r\n        group: RED_PACKAGE_RAIN_API_GROUP\r\n        #配置文件后缀，用于拼接配置配置文件名称，目前只支持yaml和properties\r\n        file-extension: yaml\r\n        #配置自动刷新\r\n        refresh-enabled: true\r\n        #配置文件的前缀，默认是application.name的值，如果配了prefix，就取prefix的值\r\n        prefix: spring-cloud-security-oauth2-dev\r\n        # 配置编码\r\n        encode: UTF-8\r\n        # 用户名\r\n        username: nacos\r\n        # 密码\r\n        password: nacos\r\n\r\n# 本地的spring-cloud-security-oauth2-dev.yaml不起作用，直接读取nacos上的配置，本地的spring-cloud-security-oauth2-dev.yaml文件保留下来作为参考','10b665373581774d80e00507c68cb3d5','2010-05-05 00:00:00','2024-02-15 13:06:23',NULL,'223.153.70.74','I','21c790b2-0b30-4433-a030-245f17203d2f',''),(20,28,'spring-cloud-security-oauth2-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# bootstrap.yml优先级比application.yml优先级高\r\nspring:\r\n  # prefix-{spring.profile.active}.${file-extension}\r\n  # Nacos会根据当前环境去拼接配置名称查找相应配置文件，\r\n  # 示例：{spring.application.name}-{spring.profiles.active}-{spring.cloud.nacos.config.file-extension}\r\n  # 获取到值：spring-cloud-security-oauth2-dev.yaml\r\n  # Nacos会根据当前环境和file-extension参数去拼接配置文件名称\r\n  profiles:\r\n    # 本地环境local，开发环境dev，测试环境test，生产环境prod\r\n    # 当前活动的配置文件为dev\r\n    active: local\r\n    # 应用名称\r\n  application:\r\n    name: spring-cloud-security-oauth2\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        # 服务注册地址\r\n        server-addr: 106.14.132.94:8848\r\n      config:\r\n        #nacos配置中心地址\r\n        server-addr: 106.14.132.94:8848\r\n        #配置中心的命名空间id\r\n        namespace: 100df702-2100-4d18-ae40-e77eb60bd387\r\n        #配置分组，默认没有也可以\r\n        group: RED_PACKAGE_RAIN_API_GROUP\r\n        #配置文件后缀，用于拼接配置配置文件名称，目前只支持yaml和properties\r\n        file-extension: yaml\r\n        #配置自动刷新\r\n        refresh-enabled: true\r\n        #配置文件的前缀，默认是application.name的值，如果配了prefix，就取prefix的值\r\n        prefix: spring-cloud-security-oauth2-dev\r\n        # 配置编码\r\n        encode: UTF-8\r\n        # 用户名\r\n        username: nacos\r\n        # 密码\r\n        password: nacos\r\n\r\n# 本地的spring-cloud-security-oauth2-dev.yaml不起作用，直接读取nacos上的配置，本地的spring-cloud-security-oauth2-dev.yaml文件保留下来作为参考','10b665373581774d80e00507c68cb3d5','2010-05-05 00:00:00','2024-02-15 13:07:02',NULL,'223.153.70.74','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(20,29,'spring-cloud-security-oauth2-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# bootstrap.yml优先级比application.yml优先级高\nspring:\n  # prefix-{spring.profile.active}.${file-extension}\n  # Nacos会根据当前环境去拼接配置名称查找相应配置文件，\n  # 示例：{spring.application.name}-{spring.profiles.active}-{spring.cloud.nacos.config.file-extension}\n  # 获取到值：spring-cloud-security-oauth2-local.yaml\n  # Nacos会根据当前环境和file-extension参数去拼接配置文件名称\n  profiles:\n    # 本地环境local，开发环境dev，测试环境test，生产环境prod\n    # 当前活动的配置文件为dev\n    active: local\n    # 应用名称\n  application:\n    name: spring-cloud-security-oauth2\n  cloud:\n    nacos:\n      discovery:\n        # 服务注册地址\n        server-addr: 106.14.132.94:8848\n      config:\n        #nacos配置中心地址\n        server-addr: 106.14.132.94:8848\n        #配置中心的命名空间id\n        namespace: 100df702-2100-4d18-ae40-e77eb60bd387\n        #配置分组，默认没有也可以\n        group: RED_PACKAGE_RAIN_API_GROUP\n        #配置文件后缀，用于拼接配置配置文件名称，目前只支持yaml和properties\n        file-extension: yaml\n        #配置自动刷新\n        refresh-enabled: true\n        #配置文件的前缀，默认是application.name的值，如果配了prefix，就取prefix的值\n        prefix: spring-cloud-security-oauth2-dev\n        # 配置编码\n        encode: UTF-8\n        # 用户名\n        username: nacos\n        # 密码\n        password: nacos\n\n# 本地的spring-cloud-security-oauth2-local.yaml不起作用，直接读取nacos上的配置，本地的spring-cloud-security-oauth2-local.yaml文件保留下来作为参考','cdf934b69d3e22764744d7f0f6e74fbe','2010-05-05 00:00:00','2024-02-15 13:10:45',NULL,'223.153.70.74','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(20,30,'spring-cloud-security-oauth2-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-security-oauth2\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n    # Hikari连接池配置\n    hikari:\n      minimum-idle: 5  # 最小空闲连接数\n      idle-timeout: 600000  # 连接空闲超时时间\n      maximum-pool-size: 10  # 连接池最大连接数\n      auto-commit: true  # 是否自动提交事务\n      pool-name: MyHikariCP  # 连接池名称\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\n      connection-timeout: 30000  # 连接超时时间\n      connection-test-query: SELECT 1  # 连接测试查询语句\nhost:\n  ip: 127.0.0.1\n# 认证配置\nauth:\n  jwt:\n    keyPairName: jwt.jks  # 密钥对文件名\n    keyPairAlias: jwt  # 密钥对别名\n    keyPairSecret: 123456  # 密钥对密码\n    keyPairStoreSecret: 123456  # 密钥对存储密码','7b3301dc10c805abbeb5a24f5146ab35','2010-05-05 00:00:00','2024-02-15 13:12:04',NULL,'223.153.70.74','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(20,31,'spring-cloud-security-oauth2-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-security-oauth2\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n    # Hikari连接池配置\n    hikari:\n      minimum-idle: 5  # 最小空闲连接数\n      idle-timeout: 600000  # 连接空闲超时时间\n      maximum-pool-size: 10  # 连接池最大连接数\n      auto-commit: true  # 是否自动提交事务\n      pool-name: MyHikariCP  # 连接池名称\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\n      connection-timeout: 30000  # 连接超时时间\n      connection-test-query: SELECT 1  # 连接测试查询语句\nhost:\n  ip: 127.0.0.1\n# 认证配置\nauth:\n  jwt:\n    keyPairName: jwt.jks  # 密钥对文件名\n    keyPairAlias: jwt  # 密钥对别名\n    keyPairSecret: 123456  # 密钥对密码\n    keyPairStoreSecret: 123456  # 密钥对存储密码','7b3301dc10c805abbeb5a24f5146ab35','2010-05-05 00:00:00','2024-02-15 13:17:30',NULL,'223.153.70.74','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(0,32,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-gateway\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n# 环境变量\r\nenvironment: 127.0.0.1\r\n# 网关鉴权\r\nauth:\r\n  gateway:\r\n    # 跳过过滤\r\n    shouldSkipUrls:\r\n      - /user/xx\r\n      - /xx/xx\r\n','dd2076e3cddf78bc0844a316873a6f33','2010-05-05 00:00:00','2024-02-15 13:18:24',NULL,'223.153.70.74','I','21c790b2-0b30-4433-a030-245f17203d2f',''),(25,33,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-gateway\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n# 环境变量\r\nenvironment: 127.0.0.1\r\n# 网关鉴权\r\nauth:\r\n  gateway:\r\n    # 跳过过滤\r\n    shouldSkipUrls:\r\n      - /user/xx\r\n      - /xx/xx\r\n','dd2076e3cddf78bc0844a316873a6f33','2010-05-05 00:00:00','2024-02-15 13:21:34',NULL,'223.153.70.74','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(25,34,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n# 环境变量\nenvironment: 127.0.0.1:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/xx\n      - /xx/xx\n','2c9489eb1e11903dc02a8b90a2ec9217','2010-05-05 00:00:00','2024-02-15 13:22:57',NULL,'223.153.70.74','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(25,35,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n# 环境变量\nenvironment: 127.0.0.1:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/xx\n      - /xx/xx\n','2c9489eb1e11903dc02a8b90a2ec9217','2010-05-05 00:00:00','2024-02-15 13:25:15',NULL,'223.153.70.74','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(25,36,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n# 环境变量\nenvironment: localhost:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/xx\n      - /xx/xx\n','7e8be9e5b04b704bd8765d4417dc5f82','2010-05-05 00:00:00','2024-02-15 13:30:00',NULL,'223.153.70.74','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(25,37,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n# 环境变量\nenvironment: http://127.0.0.1:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/xx\n      - /xx/xx\n','3a5bafbae36efcf96db42a6792280891','2010-05-05 00:00:00','2024-02-15 13:30:36',NULL,'223.153.70.74','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(25,38,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n# 环境变量\nenvironment: http://127.0.0.1:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/xx\n      - /xx/xx\n','3a5bafbae36efcf96db42a6792280891','2010-05-05 00:00:00','2024-02-15 13:31:59',NULL,'223.153.70.74','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(25,39,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n# 环境变量\nenvironment: http://localhost:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/xx\n      - /xx/xx\n','ab35e0e2f1400e57cc9dcd099cf4ea46','2010-05-05 00:00:00','2024-02-15 13:33:15',NULL,'223.153.70.74','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(25,40,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n# 环境变量\nenvironment: http://127.0.0.1:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/xx\n      - /xx/xx\n','3a5bafbae36efcf96db42a6792280891','2010-05-05 00:00:00','2024-02-15 13:52:41',NULL,'223.153.70.74','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(0,41,'red-package-rain-server-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8067\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 192.168.80.101:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup','4c6c9df820bb18e8d03f089db00701a6','2010-05-05 00:00:00','2024-02-15 14:07:39',NULL,'223.153.70.74','I','21c790b2-0b30-4433-a030-245f17203d2f',''),(20,42,'spring-cloud-security-oauth2-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-security-oauth2\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n    # Hikari连接池配置\n    hikari:\n      minimum-idle: 5  # 最小空闲连接数\n      idle-timeout: 600000  # 连接空闲超时时间\n      maximum-pool-size: 10  # 连接池最大连接数\n      auto-commit: true  # 是否自动提交事务\n      pool-name: MyHikariCP  # 连接池名称\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\n      connection-timeout: 30000  # 连接超时时间\n      connection-test-query: SELECT 1  # 连接测试查询语句\nhost:\n  ip: 127.0.0.1\n# 认证配置\nauth:\n  jwt:\n    keyPairName: jwt.jks  # 密钥对文件名\n    keyPairAlias: jwt  # 密钥对别名\n    keyPairSecret: 123456  # 密钥对密码\n    keyPairStoreSecret: 123456  # 密钥对存储密码','7b3301dc10c805abbeb5a24f5146ab35','2010-05-05 00:00:00','2024-02-22 10:45:32',NULL,'223.147.237.67','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(20,43,'spring-cloud-security-oauth2-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-security-oauth2\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n    # Hikari连接池配置\n    hikari:\n      minimum-idle: 5  # 最小空闲连接数\n      idle-timeout: 600000  # 连接空闲超时时间\n      maximum-pool-size: 10  # 连接池最大连接数\n      auto-commit: true  # 是否自动提交事务\n      pool-name: MyHikariCP  # 连接池名称\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\n      connection-timeout: 30000  # 连接超时时间\n      connection-test-query: SELECT 1  # 连接测试查询语句\nhost:\n  ip: 127.0.0.1\n# 认证配置\nauth:\n  jwt:\n  # 密钥对文件名\n    keyPairName: jwt.jks\n    # 密钥对别名\n    keyPairAlias: jwt\n    # 密钥对密码\n    keyPairSecret: 123456\n    # 密钥对存储密码\n    keyPairStoreSecret: 123456','4311a552c9ca57107deabfea1f96da5d','2010-05-05 00:00:00','2024-02-22 10:49:33',NULL,'223.147.237.67','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(20,44,'spring-cloud-security-oauth2-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-security-oauth2\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n    # Hikari连接池配置\n    hikari:\n      minimum-idle: 5  # 最小空闲连接数\n      idle-timeout: 600000  # 连接空闲超时时间\n      maximum-pool-size: 10  # 连接池最大连接数\n      auto-commit: true  # 是否自动提交事务\n      pool-name: MyHikariCP  # 连接池名称\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\n      connection-timeout: 30000  # 连接超时时间\n      connection-test-query: SELECT 1  # 连接测试查询语句\nhost:\n  ip: 127.0.0.1\n# 认证配置\nauthjwt:\n    keyPairName: jwt.jks  # 密钥对文件名\n    keyPairAlias: jwt  # 密钥对别名\n    keyPairSecret: 123456  # 密钥对密码\n    keyPairStoreSecret: 123456  # 密钥对存储密码','cab66cef41f27c9fa2e576720ff76ecf','2010-05-05 00:00:00','2024-02-22 10:52:25',NULL,'223.147.237.67','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(0,45,'user-local.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','appid: wx9ccd9a18a5567939\r\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\r\nbaidu:\r\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\r\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\r\nfeign:\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 5000\r\n        loggerLevel: \'BASIC  \'\r\n        readTimeout: 5000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n      mime-types: text/xml,application/xml,application/json\r\n      min-request-size: 1024\r\n    response:\r\n      enabled: true\r\n  httpclient:\r\n    enabled: true\r\n    max-connections: 200\r\n    max-connections-per-route: 50\r\nmybatis:\r\n  configuration:\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n    map-underscore-to-camel-case: true\r\nmybatis-plus:\r\n  global-config:\r\n    db-column-underline: true\r\n    field-strategy: 1\r\n    id-type: 0\r\n  mapper-locations: classpath*:/mapper/*.xml\r\n\r\nserver:\r\n  error:\r\n    path: http://localhost:8098/user/error\r\n  port: 8098\r\n  servlet:\r\n    context-path: /user\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://192.168.80.111:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\r\n    username: root\r\n    password: masterroot\r\n  devtools:\r\n    restart:\r\n      enable: true\r\n  redis:\r\n    database: 0\r\n    host: 192.168.80.121\r\n    lettuce:\r\n      pool:\r\n        max-active: 32\r\n        max-idle: 16\r\n        min-idle: 8\r\n    password: redispassword\r\n    port: 6379\r\n\r\n# 环境变量\r\nsecurity:\r\n environment: http://127.0.0.1:8097','2e729e4441bca7dc48b97987352e2731','2010-05-05 00:00:00','2024-02-22 11:25:18',NULL,'223.147.237.67','I','21c790b2-0b30-4433-a030-245f17203d2f',''),(38,46,'user-local.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','appid: wx9ccd9a18a5567939\r\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\r\nbaidu:\r\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\r\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\r\nfeign:\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 5000\r\n        loggerLevel: \'BASIC  \'\r\n        readTimeout: 5000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n      mime-types: text/xml,application/xml,application/json\r\n      min-request-size: 1024\r\n    response:\r\n      enabled: true\r\n  httpclient:\r\n    enabled: true\r\n    max-connections: 200\r\n    max-connections-per-route: 50\r\nmybatis:\r\n  configuration:\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n    map-underscore-to-camel-case: true\r\nmybatis-plus:\r\n  global-config:\r\n    db-column-underline: true\r\n    field-strategy: 1\r\n    id-type: 0\r\n  mapper-locations: classpath*:/mapper/*.xml\r\n\r\nserver:\r\n  error:\r\n    path: http://localhost:8098/user/error\r\n  port: 8098\r\n  servlet:\r\n    context-path: /user\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://192.168.80.111:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\r\n    username: root\r\n    password: masterroot\r\n  devtools:\r\n    restart:\r\n      enable: true\r\n  redis:\r\n    database: 0\r\n    host: 192.168.80.121\r\n    lettuce:\r\n      pool:\r\n        max-active: 32\r\n        max-idle: 16\r\n        min-idle: 8\r\n    password: redispassword\r\n    port: 6379\r\n\r\n# 环境变量\r\nsecurity:\r\n environment: http://127.0.0.1:8097','2e729e4441bca7dc48b97987352e2731','2010-05-05 00:00:00','2024-02-22 11:39:23',NULL,'223.147.237.67','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(38,47,'user-local.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','appid: wx9ccd9a18a5567939\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\nbaidu:\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000\n        loggerLevel: \'BASIC  \'\n        readTimeout: 5000\n  compression:\n    request:\n      enabled: true\n      mime-types: text/xml,application/xml,application/json\n      min-request-size: 1024\n    response:\n      enabled: true\n  httpclient:\n    enabled: true\n    max-connections: 200\n    max-connections-per-route: 50\nmybatis:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\nmybatis-plus:\n  global-config:\n    db-column-underline: true\n    field-strategy: 1\n    id-type: 0\n  mapper-locations: classpath*:/mapper/*.xml\n\nserver:\n  error:\n    path: http://localhost:8098/user/error\n  port: 8098\n  servlet:\n    context-path: /user\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\n    username: root\n    password: masterroot\n  devtools:\n    restart:\n      enable: true\n  redis:\n    database: 0\n    host: 192.168.80.121\n    lettuce:\n      pool:\n        max-active: 32\n        max-idle: 16\n        min-idle: 8\n    password: redispassword\n    port: 6379\n\n# 环境变量\nsecurity:\n environment: http://127.0.0.1:8097','10271dd24c308ac04fe832a83d72b845','2010-05-05 00:00:00','2024-02-22 11:40:49',NULL,'223.147.237.67','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(38,48,'user-local.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','appid: wx9ccd9a18a5567939\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\nbaidu:\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000\n        loggerLevel: \'BASIC  \'\n        readTimeout: 5000\n  compression:\n    request:\n      enabled: true\n      mime-types: text/xml,application/xml,application/json\n      min-request-size: 1024\n    response:\n      enabled: true\n  httpclient:\n    enabled: true\n    max-connections: 200\n    max-connections-per-route: 50\nmybatis:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\nmybatis-plus:\n  global-config:\n    db-column-underline: true\n    field-strategy: 1\n    id-type: 0\n  mapper-locations: classpath*:/mapper/*.xml\nserver:\n  error:\n    path: http://localhost:8098/user/error\n  port: 8098\n  servlet:\n    context-path: /user\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\n    username: root\n    password: masterroot\n  devtools:\n    restart:\n      enable: true\n  redis:\n    database: 0\n    host: 192.168.80.121\n    lettuce:\n      pool:\n        max-active: 32\n        max-idle: 16\n        min-idle: 8\n    password: redispassword\n    port: 6379\n\n# 环境变量\nsecurity:\n environment: http://127.0.0.1:8097','90d7d384e7a0a20433d8691d461d0630','2010-05-05 00:00:00','2024-02-22 11:43:14',NULL,'223.147.237.67','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(38,49,'user-local.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\n    username: root\n    password: masterroot\n  devtools:\n    restart:\n      enable: true\n  redis:\n    database: 0\n    host: 192.168.80.121\n    lettuce:\n      pool:\n        max-active: 32\n        max-idle: 16\n        min-idle: 8\n    password: redispassword\n    port: 6379\nappid: wx9ccd9a18a5567939\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\nbaidu:\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000\n        loggerLevel: \'BASIC  \'\n        readTimeout: 5000\n  compression:\n    request:\n      enabled: true\n      mime-types: text/xml,application/xml,application/json\n      min-request-size: 1024\n    response:\n      enabled: true\n  httpclient:\n    enabled: true\n    max-connections: 200\n    max-connections-per-route: 50\nmybatis:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\nmybatis-plus:\n  global-config:\n    db-column-underline: true\n    field-strategy: 1\n    id-type: 0\n  mapper-locations: classpath*:/mapper/*.xml\nserver:\n  port: 8098\n  error:\n    path: http://localhost:8098/user/error\n  servlet:\n    context-path: /user\n# 环境变量\nsecurity:\n environment: http://127.0.0.1:8097','a4c64533089b9e137dd1c01afa268d98','2010-05-05 00:00:00','2024-02-22 11:45:22',NULL,'223.147.237.67','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(38,50,'user-local.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','spring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\n    username: root\n    password: masterroot\n  devtools:\n    restart:\n      enable: true\n  redis:\n    database: 0\n    host: 192.168.80.121\n    lettuce:\n      pool:\n        max-active: 32\n        max-idle: 16\n        min-idle: 8\n    password: redispassword\n    port: 6379\n# 服务端口\nserver:\n  port: 8077\n  error:\n    path: http://localhost:8098/user/error\n  servlet:\n    context-path: /user\nappid: wx9ccd9a18a5567939\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\nbaidu:\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000\n        loggerLevel: \'BASIC  \'\n        readTimeout: 5000\n  compression:\n    request:\n      enabled: true\n      mime-types: text/xml,application/xml,application/json\n      min-request-size: 1024\n    response:\n      enabled: true\n  httpclient:\n    enabled: true\n    max-connections: 200\n    max-connections-per-route: 50\nmybatis:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\nmybatis-plus:\n  global-config:\n    db-column-underline: true\n    field-strategy: 1\n    id-type: 0\n  mapper-locations: classpath*:/mapper/*.xml    \n# 环境变量\nsecurity:\n  environment: http://127.0.0.1:8097','4272543e2557b2a072db0da60f68faff','2010-05-05 00:00:00','2024-02-22 11:46:48',NULL,'223.147.237.67','D','21c790b2-0b30-4433-a030-245f17203d2f',''),(0,51,'user-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','spring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\r\n    username: root\r\n    password: masterroot\r\n  devtools:\r\n    restart:\r\n      enable: true\r\n  redis:\r\n    database: 0\r\n    host: 192.168.80.121\r\n    lettuce:\r\n      pool:\r\n        max-active: 32\r\n        max-idle: 16\r\n        min-idle: 8\r\n    password: redispassword\r\n    port: 6379\r\n# 服务端口\r\nserver:\r\n  port: 8077\r\n  error:\r\n    path: http://localhost:8098/user/error\r\n  servlet:\r\n    context-path: /user\r\nappid: wx9ccd9a18a5567939\r\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\r\nbaidu:\r\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\r\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\r\nfeign:\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 5000\r\n        loggerLevel: \'BASIC  \'\r\n        readTimeout: 5000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n      mime-types: text/xml,application/xml,application/json\r\n      min-request-size: 1024\r\n    response:\r\n      enabled: true\r\n  httpclient:\r\n    enabled: true\r\n    max-connections: 200\r\n    max-connections-per-route: 50\r\nmybatis:\r\n  configuration:\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n    map-underscore-to-camel-case: true\r\nmybatis-plus:\r\n  global-config:\r\n    db-column-underline: true\r\n    field-strategy: 1\r\n    id-type: 0\r\n  mapper-locations: classpath*:/mapper/*.xml    \r\n# 环境变量\r\nsecurity:\r\n  environment: http://127.0.0.1:8097','60812e9a526b59b4e95c039b9d505ce7','2010-05-05 00:00:00','2024-02-22 11:47:20',NULL,'223.147.237.67','I','21c790b2-0b30-4433-a030-245f17203d2f',''),(11,52,'user-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','appid: wx9ccd9a18a5567939  # 应用ID\r\nbaidu:  # 百度配置\r\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE  # 客户端ID\r\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B  # 客户端密钥\r\nfeign:  # Feign配置\r\n  client:  # 客户端配置\r\n    config:  # 配置\r\n      default:  # 默认配置\r\n        connectTimeout: 5000  # 连接超时时间\r\n        loggerLevel: \'BASIC  \'  # 日志级别\r\n        readTimeout: 5000  # 读取超时时间\r\n  compression:  # 压缩配置\r\n    request:  # 请求压缩配置\r\n      enabled: true  # 是否启用\r\n      mime-types: text/xml,application/xml,application/json  # MIME类型\r\n      min-request-size: 1024  # 最小请求大小\r\n    response:  # 响应压缩配置\r\n      enabled: true  # 是否启用\r\n  httpclient:  # HttpClient配置\r\n    enabled: true  # 是否启用\r\n    max-connections: 200  # 最大连接数\r\n    max-connections-per-route: 50  # 每个路由的最大连接数\r\nmybatis:  # MyBatis配置\r\n  configuration:  # 配置\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  # 日志实现类\r\n    map-underscore-to-camel-case: true  # 将下划线命名转换为驼峰命名\r\nmybatis-plus:  # MyBatis Plus配置\r\n  global-config:  # 全局配置\r\n    db-column-underline: true  # 数据库列是否使用下划线命名\r\n    field-strategy: 1  # 字段填充策略\r\n    id-type: 0  # ID类型\r\n  mapper-locations: classpath*:/mapper/*.xml  # Mapper文件路径\r\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec  # 密钥\r\nserver:  # 服务器配置\r\n  error:  # 错误配置\r\n    path: http://localhost:8098/user/error  # 错误路径\r\n  port: 8098  # 端口号\r\n  servlet:  # Servlet配置\r\n    context-path: /user  # 上下文路径\r\nspring:  # Spring配置\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: user\r\n  datasource:  # 数据源配置\r\n    type: com.alibaba.druid.pool.DruidDataSource  # 数据源类型\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # JDBC驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8  # 数据库URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n  devtools:  # 开发工具配置\r\n    restart:  # 重启配置\r\n      enable: true  # 是否启用\r\n  redis:  # Redis配置\r\n    database: 0  # 数据库索引\r\n    host: 106.14.132.94  # 主机名\r\n    lettuce:  # Lettuce配置\r\n      pool:  # 连接池配置\r\n        max-active: 32  # 最大活跃连接数\r\n        max-idle: 16  # 最大空闲连接数\r\n        min-idle: 8  # 最小空闲连接数\r\n    password: redispassword  # Redis密码\r\n    port: 63791  # 端口号','7b922151c3a6e77bdfc195359a755889','2010-05-05 00:00:00','2024-02-22 11:49:03',NULL,'223.147.237.67','D','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,53,'user-dev.yaml','RED_PACKAGE_RAIN_DEV_GROUP','开发环境红包雨','appid: wx9ccd9a18a5567939  # 应用ID\r\nbaidu:  # 百度配置\r\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE  # 客户端ID\r\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B  # 客户端密钥\r\nfeign:  # Feign配置\r\n  client:  # 客户端配置\r\n    config:  # 配置\r\n      default:  # 默认配置\r\n        connectTimeout: 5000  # 连接超时时间\r\n        loggerLevel: \'BASIC  \'  # 日志级别\r\n        readTimeout: 5000  # 读取超时时间\r\n  compression:  # 压缩配置\r\n    request:  # 请求压缩配置\r\n      enabled: true  # 是否启用\r\n      mime-types: text/xml,application/xml,application/json  # MIME类型\r\n      min-request-size: 1024  # 最小请求大小\r\n    response:  # 响应压缩配置\r\n      enabled: true  # 是否启用\r\n  httpclient:  # HttpClient配置\r\n    enabled: true  # 是否启用\r\n    max-connections: 200  # 最大连接数\r\n    max-connections-per-route: 50  # 每个路由的最大连接数\r\nmybatis:  # MyBatis配置\r\n  configuration:  # 配置\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  # 日志实现类\r\n    map-underscore-to-camel-case: true  # 将下划线命名转换为驼峰命名\r\nmybatis-plus:  # MyBatis Plus配置\r\n  global-config:  # 全局配置\r\n    db-column-underline: true  # 数据库列是否使用下划线命名\r\n    field-strategy: 1  # 字段填充策略\r\n    id-type: 0  # ID类型\r\n  mapper-locations: classpath*:/mapper/*.xml  # Mapper文件路径\r\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec  # 密钥\r\nserver:  # 服务器配置\r\n  error:  # 错误配置\r\n    path: http://localhost:8098/user/error  # 错误路径\r\n  port: 8098  # 端口号\r\n  servlet:  # Servlet配置\r\n    context-path: /user  # 上下文路径\r\nspring:  # Spring配置\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: user\r\n  datasource:  # 数据源配置\r\n    type: com.alibaba.druid.pool.DruidDataSource  # 数据源类型\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # JDBC驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8  # 数据库URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n  devtools:  # 开发工具配置\r\n    restart:  # 重启配置\r\n      enable: true  # 是否启用\r\n  redis:  # Redis配置\r\n    database: 0  # 数据库索引\r\n    host: 106.14.132.94  # 主机名\r\n    lettuce:  # Lettuce配置\r\n      pool:  # 连接池配置\r\n        max-active: 32  # 最大活跃连接数\r\n        max-idle: 16  # 最大空闲连接数\r\n        min-idle: 8  # 最小空闲连接数\r\n    password: redispassword  # Redis密码\r\n    port: 63791  # 端口号\r\n# 环境变量\r\nsecurity:\r\n  environment: http://127.0.0.1:8097','4e22ceb75c53284075e461fbc05bf551','2010-05-05 00:00:00','2024-02-22 11:50:18',NULL,'223.147.237.67','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(10,54,'red-package-rain-server-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 192.168.80.101:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup','68020a8bbbd5d4f5a3834581b8890d34','2010-05-05 00:00:00','2024-02-22 11:50:36',NULL,'223.147.237.67','D','100df702-2100-4d18-ae40-e77eb60bd387',''),(44,55,'user-dev.yaml','RED_PACKAGE_RAIN_DEV_GROUP','开发环境红包雨','appid: wx9ccd9a18a5567939  # 应用ID\r\nbaidu:  # 百度配置\r\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE  # 客户端ID\r\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B  # 客户端密钥\r\nfeign:  # Feign配置\r\n  client:  # 客户端配置\r\n    config:  # 配置\r\n      default:  # 默认配置\r\n        connectTimeout: 5000  # 连接超时时间\r\n        loggerLevel: \'BASIC  \'  # 日志级别\r\n        readTimeout: 5000  # 读取超时时间\r\n  compression:  # 压缩配置\r\n    request:  # 请求压缩配置\r\n      enabled: true  # 是否启用\r\n      mime-types: text/xml,application/xml,application/json  # MIME类型\r\n      min-request-size: 1024  # 最小请求大小\r\n    response:  # 响应压缩配置\r\n      enabled: true  # 是否启用\r\n  httpclient:  # HttpClient配置\r\n    enabled: true  # 是否启用\r\n    max-connections: 200  # 最大连接数\r\n    max-connections-per-route: 50  # 每个路由的最大连接数\r\nmybatis:  # MyBatis配置\r\n  configuration:  # 配置\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  # 日志实现类\r\n    map-underscore-to-camel-case: true  # 将下划线命名转换为驼峰命名\r\nmybatis-plus:  # MyBatis Plus配置\r\n  global-config:  # 全局配置\r\n    db-column-underline: true  # 数据库列是否使用下划线命名\r\n    field-strategy: 1  # 字段填充策略\r\n    id-type: 0  # ID类型\r\n  mapper-locations: classpath*:/mapper/*.xml  # Mapper文件路径\r\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec  # 密钥\r\nserver:  # 服务器配置\r\n  error:  # 错误配置\r\n    path: http://localhost:8098/user/error  # 错误路径\r\n  port: 8098  # 端口号\r\n  servlet:  # Servlet配置\r\n    context-path: /user  # 上下文路径\r\nspring:  # Spring配置\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: user\r\n  datasource:  # 数据源配置\r\n    type: com.alibaba.druid.pool.DruidDataSource  # 数据源类型\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # JDBC驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8  # 数据库URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n  devtools:  # 开发工具配置\r\n    restart:  # 重启配置\r\n      enable: true  # 是否启用\r\n  redis:  # Redis配置\r\n    database: 0  # 数据库索引\r\n    host: 106.14.132.94  # 主机名\r\n    lettuce:  # Lettuce配置\r\n      pool:  # 连接池配置\r\n        max-active: 32  # 最大活跃连接数\r\n        max-idle: 16  # 最大空闲连接数\r\n        min-idle: 8  # 最小空闲连接数\r\n    password: redispassword  # Redis密码\r\n    port: 63791  # 端口号\r\n# 环境变量\r\nsecurity:\r\n  environment: http://127.0.0.1:8097','4e22ceb75c53284075e461fbc05bf551','2010-05-05 00:00:00','2024-02-22 11:56:22',NULL,'223.147.237.67','U','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,56,'spring-cloud-security-oauth2-dev.yaml','RED_PACKAGE_RAIN_DEV_GROUP','开发环境','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-security-oauth2\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  # 数据源配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n    # Hikari连接池配置\r\n    hikari:\r\n      minimum-idle: 5  # 最小空闲连接数\r\n      idle-timeout: 600000  # 连接空闲超时时间\r\n      maximum-pool-size: 10  # 连接池最大连接数\r\n      auto-commit: true  # 是否自动提交事务\r\n      pool-name: MyHikariCP  # 连接池名称\r\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\r\n      connection-timeout: 30000  # 连接超时时间\r\n      connection-test-query: SELECT 1  # 连接测试查询语句\r\nhost:\r\n  ip: 106.14.132.94\r\n# 认证配置\r\nauthjwt:\r\n    keyPairName: jwt.jks  # 密钥对文件名\r\n    keyPairAlias: jwt  # 密钥对别名\r\n    keyPairSecret: 123456  # 密钥对密码\r\n    keyPairStoreSecret: 123456  # 密钥对存储密码','0088ecaad78ce707331d7073c47dde4e','2010-05-05 00:00:00','2024-02-22 11:57:42',NULL,'223.147.237.67','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,57,'spring-cloud-gateway-dev.yaml','RED_PACKAGE_RAIN_DEV_GROUP','开发环境','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8087\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  gateway:\r\n    filters:\r\n      -name: RequestRateLimiter\r\n        args:\r\n          redis-rate-limiter.replenishRate: 10 # 令牌桶每秒填充平均速率\r\n          redis-rate-limiter.burstCapacity: 20 # 令牌桶的上限\r\n          key-resolver: \"#{@userKeyResolver}\" #使用SpEL表达式从Spring容器中获取Bean对象\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-gateway\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n# 环境变量\r\nenvironment: http://106.14.132.94:8097\r\n# 网关鉴权\r\nauth:\r\n  gateway:\r\n    # 跳过过滤\r\n    shouldSkipUrls:\r\n      - /user/**\r\n','a098209fb2afea2c05c647ef45fcba2a','2010-05-05 00:00:00','2024-02-22 11:58:34',NULL,'223.147.237.67','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,58,'red-package-rain-server-dev.yaml','RED_PACKAGE_RAIN_DEV_GROUP','开发环境','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8067\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 192.168.80.101:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup','4c6c9df820bb18e8d03f089db00701a6','2010-05-05 00:00:00','2024-02-22 11:59:16',NULL,'223.147.237.67','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,59,'red-package-rain-api-dev.yaml','RED_PACKAGE_RAIN_DEV_GROUP','开发环境','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8057\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 106.14.132.94:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup\r\nfile:\r\n  path: /opt/app/redpackagerain/api\r\nresilience4j:\r\n  retry: # 重试策略机制配置\r\n    instances: # 定义多个重试策略实例\r\n      retryApi: # 第一个重试策略重试名称\r\n        max-attempts: 3 # 操作失败最大重试次数为3\r\n        wait-duration: 1s # 每次重试等待时间1秒\r\n  circuitbreaker:\r\n    instances: # 定义多个断路器实例\r\n      circuitBreakerApi: # 第一个断路器实例名称\r\n        registerHealthIndicator: true # 配置健康指示器\r\n        slidingWindowSize: 10 # 滑动窗口大小\r\n        minimumNumberOfCalls: 5 # 最小调用次数\r\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\r\n        slidingWindowType: TIME_BASED # 滑动窗口类型\r\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\r\n        waitDurationInOpenState: 1s # 开启状态下等待时间\r\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\r\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\r\n        ignoreExceptions: # 忽略的异常列表\r\n          - java.io.IOException\r\n  ratelimiter:\r\n    instances: # 定义多个限流策略实例\r\n      rateLimiterApi: # 第一个限流策略实例名称\r\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\r\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\r\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\r\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\r\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\r\n\r\n','bfeed79264a297c4bc6c84c85f7a72f3','2010-05-05 00:00:00','2024-02-22 12:01:17',NULL,'223.147.237.67','I','100df702-2100-4d18-ae40-e77eb60bd387',''),(7,60,'red-package-rain-api-dev.yml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，对于一个8核心16线程的服务器，理论上的最大线程数可能接近32000（8核心 * 4000线程/核心）。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 192.168.80.100\r\n    # 密码\r\n    password: admin\r\n    # 端口\r\n    port: 6379\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 192.168.80.101:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup\r\nfile:\r\n  path: D://opt\r\nresilience4j:\r\n  retry: # 重试策略机制配置\r\n    instances: # 定义多个重试策略实例\r\n      retryApi: # 第一个重试策略重试名称\r\n        max-attempts: 3 # 操作失败最大重试次数为3\r\n        wait-duration: 1s # 每次重试等待时间1秒\r\n  circuitbreaker:\r\n    instances: # 定义多个断路器实例\r\n      circuitBreakerApi: # 第一个断路器实例名称\r\n        registerHealthIndicator: true # 配置健康指示器\r\n        slidingWindowSize: 10 # 滑动窗口大小\r\n        minimumNumberOfCalls: 5 # 最小调用次数\r\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\r\n        slidingWindowType: TIME_BASED # 滑动窗口类型\r\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\r\n        waitDurationInOpenState: 1s # 开启状态下等待时间\r\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\r\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\r\n        ignoreExceptions: # 忽略的异常列表\r\n          - java.io.IOException\r\n  ratelimiter:\r\n    instances: # 定义多个限流策略实例\r\n      rateLimiterApi: # 第一个限流策略实例名称\r\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\r\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\r\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\r\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\r\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\r\n\r\n','52db5234a155f623da19b5da14c1f2b5','2010-05-05 00:00:00','2024-02-22 12:01:22',NULL,'223.147.237.67','D','100df702-2100-4d18-ae40-e77eb60bd387',''),(16,61,'spring-cloud-security-oauth2-dev.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-security-oauth2\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n    # Hikari连接池配置\n    hikari:\n      minimum-idle: 5  # 最小空闲连接数\n      idle-timeout: 600000  # 连接空闲超时时间\n      maximum-pool-size: 10  # 连接池最大连接数\n      auto-commit: true  # 是否自动提交事务\n      pool-name: MyHikariCP  # 连接池名称\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\n      connection-timeout: 30000  # 连接超时时间\n      connection-test-query: SELECT 1  # 连接测试查询语句\nhost:\n  ip: 127.0.0.1\n# 认证配置\nauth:\n  jwt:\n    keyPairName: jwt.jks  # 密钥对文件名\n    keyPairAlias: jwt  # 密钥对别名\n    keyPairSecret: 123456  # 密钥对密码\n    keyPairStoreSecret: 123456  # 密钥对存储密码','7b3301dc10c805abbeb5a24f5146ab35','2010-05-05 00:00:00','2024-02-22 12:01:26',NULL,'223.147.237.67','D','100df702-2100-4d18-ae40-e77eb60bd387',''),(19,62,'spring-cloud-gateway-dev.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-gateway\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n# 环境变量\r\nenvironment: 106.14.132.94\r\n# 网关鉴权\r\nauth:\r\n  gateway:\r\n    # 跳过过滤\r\n    shouldSkipUrls:\r\n      - /user/xx\r\n      - /xx/xx\r\n','014ef75f94c3b67f012328a011e7f362','2010-05-05 00:00:00','2024-02-22 12:01:30',NULL,'223.147.237.67','D','100df702-2100-4d18-ae40-e77eb60bd387',''),(0,63,'nacos.cfg.dataIdfoo','foo','','helloWorld','1a833da63a6b7e20098dae06d06602e1','2010-05-05 00:00:00','2024-02-25 21:00:34',NULL,'222.112.82.141','I','',''),(50,64,'nacos.cfg.dataIdfoo','foo','','helloWorld','1a833da63a6b7e20098dae06d06602e1','2010-05-05 00:00:00','2024-02-25 21:01:39',NULL,'222.112.82.141','U','',''),(50,65,'nacos.cfg.dataIdfoo','foo','','helloWorld','1a833da63a6b7e20098dae06d06602e1','2010-05-05 00:00:00','2024-02-25 21:57:58',NULL,'222.112.82.141','U','',''),(50,66,'nacos.cfg.dataIdfoo','foo','','helloWorld','1a833da63a6b7e20098dae06d06602e1','2010-05-05 00:00:00','2024-02-25 21:59:00',NULL,'222.112.82.141','U','',''),(20,67,'spring-cloud-security-oauth2-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-security-oauth2\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n    # Hikari连接池配置\n    hikari:\n      minimum-idle: 5  # 最小空闲连接数\n      idle-timeout: 600000  # 连接空闲超时时间\n      maximum-pool-size: 10  # 连接池最大连接数\n      auto-commit: true  # 是否自动提交事务\n      pool-name: MyHikariCP  # 连接池名称\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\n      connection-timeout: 30000  # 连接超时时间\n      connection-test-query: SELECT 1  # 连接测试查询语句\nhost:\n  ip: 127.0.0.1\n# 认证配置\nauthjwt:\n    keyPairName: jwt.jks  # 密钥对文件名\n    keyPairAlias: jwt  # 密钥对别名\n    keyPairSecret: 123456  # 密钥对密码\n    keyPairStoreSecret: 123456  # 密钥对存储密码','cab66cef41f27c9fa2e576720ff76ecf','2010-05-05 00:00:00','2024-02-26 13:29:09',NULL,'223.147.218.135','D','21c790b2-0b30-4433-a030-245f17203d2f',''),(25,68,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8087\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n# 环境变量\nenvironment: http://127.0.0.1:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/xx\n      - /xx/xx\n','5516d20fc6b55b68f468d6609d2f5bef','2010-05-05 00:00:00','2024-02-26 13:29:17',NULL,'223.147.218.135','D','21c790b2-0b30-4433-a030-245f17203d2f',''),(34,69,'red-package-rain-server-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8067\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 192.168.80.101:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup','4c6c9df820bb18e8d03f089db00701a6','2010-05-05 00:00:00','2024-02-26 13:29:20',NULL,'223.147.218.135','D','21c790b2-0b30-4433-a030-245f17203d2f',''),(43,70,'user-local.yaml','RED_PACKAGE_RAIN_API_GROUP','红包雨','spring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\r\n    username: root\r\n    password: masterroot\r\n  devtools:\r\n    restart:\r\n      enable: true\r\n  redis:\r\n    database: 0\r\n    host: 192.168.80.121\r\n    lettuce:\r\n      pool:\r\n        max-active: 32\r\n        max-idle: 16\r\n        min-idle: 8\r\n    password: redispassword\r\n    port: 6379\r\n# 服务端口\r\nserver:\r\n  port: 8077\r\n  error:\r\n    path: http://localhost:8098/user/error\r\n  servlet:\r\n    context-path: /user\r\nappid: wx9ccd9a18a5567939\r\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\r\nbaidu:\r\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\r\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\r\nfeign:\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 5000\r\n        loggerLevel: \'BASIC  \'\r\n        readTimeout: 5000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n      mime-types: text/xml,application/xml,application/json\r\n      min-request-size: 1024\r\n    response:\r\n      enabled: true\r\n  httpclient:\r\n    enabled: true\r\n    max-connections: 200\r\n    max-connections-per-route: 50\r\nmybatis:\r\n  configuration:\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n    map-underscore-to-camel-case: true\r\nmybatis-plus:\r\n  global-config:\r\n    db-column-underline: true\r\n    field-strategy: 1\r\n    id-type: 0\r\n  mapper-locations: classpath*:/mapper/*.xml    \r\n# 环境变量\r\nsecurity:\r\n  environment: http://127.0.0.1:8097','60812e9a526b59b4e95c039b9d505ce7','2010-05-05 00:00:00','2024-02-26 13:29:24',NULL,'223.147.218.135','D','21c790b2-0b30-4433-a030-245f17203d2f',''),(0,71,'spring-cloud-security-oauth2-dev.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-security-oauth2\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  # 数据源配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n    # Hikari连接池配置\r\n    hikari:\r\n      minimum-idle: 5  # 最小空闲连接数\r\n      idle-timeout: 600000  # 连接空闲超时时间\r\n      maximum-pool-size: 10  # 连接池最大连接数\r\n      auto-commit: true  # 是否自动提交事务\r\n      pool-name: MyHikariCP  # 连接池名称\r\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\r\n      connection-timeout: 30000  # 连接超时时间\r\n      connection-test-query: SELECT 1  # 连接测试查询语句\r\nhost:\r\n  ip: 127.0.0.1\r\n# 认证配置\r\nauthjwt:\r\n    keyPairName: jwt.jks  # 密钥对文件名\r\n    keyPairAlias: jwt  # 密钥对别名\r\n    keyPairSecret: 123456  # 密钥对密码\r\n    keyPairStoreSecret: 123456  # 密钥对存储密码','9282d2fae844512d911a1249d3e7fadc','2010-05-05 00:00:00','2024-02-26 13:29:55',NULL,'223.147.218.135','I','21c790b2-0b30-4433-a030-245f17203d2f',''),(54,72,'spring-cloud-security-oauth2-dev.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-security-oauth2\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  # 数据源配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n    # Hikari连接池配置\r\n    hikari:\r\n      minimum-idle: 5  # 最小空闲连接数\r\n      idle-timeout: 600000  # 连接空闲超时时间\r\n      maximum-pool-size: 10  # 连接池最大连接数\r\n      auto-commit: true  # 是否自动提交事务\r\n      pool-name: MyHikariCP  # 连接池名称\r\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\r\n      connection-timeout: 30000  # 连接超时时间\r\n      connection-test-query: SELECT 1  # 连接测试查询语句\r\nhost:\r\n  ip: 127.0.0.1\r\n# 认证配置\r\nauthjwt:\r\n    keyPairName: jwt.jks  # 密钥对文件名\r\n    keyPairAlias: jwt  # 密钥对别名\r\n    keyPairSecret: 123456  # 密钥对密码\r\n    keyPairStoreSecret: 123456  # 密钥对存储密码','9282d2fae844512d911a1249d3e7fadc','2010-05-05 00:00:00','2024-02-26 13:35:18',NULL,'223.147.218.135','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(54,73,'spring-cloud-security-oauth2-dev.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8097\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-security-oauth2\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n  # 数据源配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\n    username: root  # 数据库用户名\n    password: masterroot  # 数据库密码\n    # Hikari连接池配置\n    hikari:\n      minimum-idle: 5  # 最小空闲连接数\n      idle-timeout: 600000  # 连接空闲超时时间\n      maximum-pool-size: 10  # 连接池最大连接数\n      auto-commit: true  # 是否自动提交事务\n      pool-name: MyHikariCP  # 连接池名称\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\n      connection-timeout: 30000  # 连接超时时间\n      connection-test-query: SELECT 1  # 连接测试查询语句\nhost:\n  ip: 127.0.0.1\n# 认证配置\nauthjwt:\n    keyPairName: jwt.jks  # 密钥对文件名\n    keyPairAlias: jwt  # 密钥对别名\n    keyPairSecret: 123456  # 密钥对密码\n    keyPairStoreSecret: 123456  # 密钥对存储密码','cab66cef41f27c9fa2e576720ff76ecf','2010-05-05 00:00:00','2024-02-26 13:35:50',NULL,'223.147.218.135','D','21c790b2-0b30-4433-a030-245f17203d2f',''),(0,74,'spring-cloud-security-oauth2-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','红包雨','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8097\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-security-oauth2\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  # 数据源配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver  # 驱动类名\r\n    url: jdbc:mysql://106.14.132.94:33061/oauth2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8  # 数据库连接URL\r\n    username: root  # 数据库用户名\r\n    password: masterroot  # 数据库密码\r\n    # Hikari连接池配置\r\n    hikari:\r\n      minimum-idle: 5  # 最小空闲连接数\r\n      idle-timeout: 600000  # 连接空闲超时时间\r\n      maximum-pool-size: 10  # 连接池最大连接数\r\n      auto-commit: true  # 是否自动提交事务\r\n      pool-name: MyHikariCP  # 连接池名称\r\n      max-lifetime: 3000000  # 连接的最长存活时间，应该比MySQL设置的超时时间短，默认为30分钟\r\n      connection-timeout: 30000  # 连接超时时间\r\n      connection-test-query: SELECT 1  # 连接测试查询语句\r\nhost:\r\n  ip: 127.0.0.1\r\n# 认证配置\r\nauthjwt:\r\n    keyPairName: jwt.jks  # 密钥对文件名\r\n    keyPairAlias: jwt  # 密钥对别名\r\n    keyPairSecret: 123456  # 密钥对密码\r\n    keyPairStoreSecret: 123456  # 密钥对存储密码','9282d2fae844512d911a1249d3e7fadc','2010-05-05 00:00:00','2024-02-26 13:36:16',NULL,'223.147.218.135','I','21c790b2-0b30-4433-a030-245f17203d2f',''),(0,75,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8087\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  gateway:\r\n    discovery:\r\n      locator:\r\n        # gateway可以通过开启以下配置来打开根据服务的serviceId来匹配路由,默认是大写\r\n        enabled: true\r\n    routes:\r\n      - id: provider1\r\n        uri: lb://user\r\n        predicates:\r\n          - Path=/user/**\r\n        filters:\r\n          - name: RequestRateLimiter\r\n           args:\r\n             # 令牌桶每秒填充平均速率\r\n             redis-rate-limiter.replenishRate: 10\r\n             # 令牌桶的上限\r\n             redis-rate-limiter.burstCapacity: 20\r\n             #使用SpEL表达式从Spring容器中获取Bean对象\r\n             key-resolver: \"#{@userKeyResolver}\"\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-gateway\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 1000\r\n        # 连接池最大阻塞等待时间（使用负值表示没有限制）\r\n        max-wait: -1ms\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n# 环境变量\r\nenvironment: http://127.0.0.1:8097\r\n# 网关鉴权\r\nauth:\r\n  gateway:\r\n    # 跳过过滤\r\n    shouldSkipUrls:\r\n      - /user/**\r\n','9c46a33c52417715293b9cd63ec53cd1','2010-05-05 00:00:00','2024-02-26 13:39:35',NULL,'223.147.218.135','I','21c790b2-0b30-4433-a030-245f17203d2f',''),(57,76,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8087\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  gateway:\r\n    discovery:\r\n      locator:\r\n        # gateway可以通过开启以下配置来打开根据服务的serviceId来匹配路由,默认是大写\r\n        enabled: true\r\n    routes:\r\n      - id: provider1\r\n        uri: lb://user\r\n        predicates:\r\n          - Path=/user/**\r\n        filters:\r\n          - name: RequestRateLimiter\r\n           args:\r\n             # 令牌桶每秒填充平均速率\r\n             redis-rate-limiter.replenishRate: 10\r\n             # 令牌桶的上限\r\n             redis-rate-limiter.burstCapacity: 20\r\n             #使用SpEL表达式从Spring容器中获取Bean对象\r\n             key-resolver: \"#{@userKeyResolver}\"\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: spring-cloud-gateway\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 1000\r\n        # 连接池最大阻塞等待时间（使用负值表示没有限制）\r\n        max-wait: -1ms\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n# 环境变量\r\nenvironment: http://127.0.0.1:8097\r\n# 网关鉴权\r\nauth:\r\n  gateway:\r\n    # 跳过过滤\r\n    shouldSkipUrls:\r\n      - /user/**\r\n','9c46a33c52417715293b9cd63ec53cd1','2010-05-05 00:00:00','2024-02-26 13:42:17',NULL,'223.147.218.135','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(0,77,'red-package-rain-api-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8057\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 192.168.80.101:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup\r\nfile:\r\n  path: D://opt\r\nresilience4j:\r\n  retry: # 重试策略机制配置\r\n    instances: # 定义多个重试策略实例\r\n      retryApi: # 第一个重试策略重试名称\r\n        max-attempts: 3 # 操作失败最大重试次数为3\r\n        wait-duration: 1s # 每次重试等待时间1秒\r\n  circuitbreaker:\r\n    instances: # 定义多个断路器实例\r\n      circuitBreakerApi: # 第一个断路器实例名称\r\n        registerHealthIndicator: true # 配置健康指示器\r\n        slidingWindowSize: 10 # 滑动窗口大小\r\n        minimumNumberOfCalls: 5 # 最小调用次数\r\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\r\n        slidingWindowType: TIME_BASED # 滑动窗口类型\r\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\r\n        waitDurationInOpenState: 1s # 开启状态下等待时间\r\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\r\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\r\n        ignoreExceptions: # 忽略的异常列表\r\n          - java.io.IOException\r\n  ratelimiter:\r\n    instances: # 定义多个限流策略实例\r\n      rateLimiterApi: # 第一个限流策略实例名称\r\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\r\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\r\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\r\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\r\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\r\n\r\n','60b6cb9ac19746944d8aa26b1c8f553c','2010-05-05 00:00:00','2024-02-26 13:45:23',NULL,'223.147.218.135','I','21c790b2-0b30-4433-a030-245f17203d2f',''),(0,78,'red-package-rain-server-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8067\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 192.168.80.101:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup','4c6c9df820bb18e8d03f089db00701a6','2010-05-05 00:00:00','2024-02-26 13:47:32',NULL,'223.147.218.135','I','21c790b2-0b30-4433-a030-245f17203d2f',''),(0,79,'user-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','spring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\r\n    username: root\r\n    password: masterroot\r\n  devtools:\r\n    restart:\r\n      enable: true\r\n  redis:\r\n    database: 0\r\n    host: 192.168.80.121\r\n    lettuce:\r\n      pool:\r\n        max-active: 32\r\n        max-idle: 16\r\n        min-idle: 8\r\n    password: redispassword\r\n    port: 6379\r\n# 服务端口\r\nserver:\r\n  port: 8077\r\n  error:\r\n    path: http://localhost:8098/user/error\r\n  servlet:\r\n    context-path: /user\r\nappid: wx9ccd9a18a5567939\r\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\r\nbaidu:\r\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\r\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\r\nfeign:\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 5000\r\n        loggerLevel: \'BASIC  \'\r\n        readTimeout: 5000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n      mime-types: text/xml,application/xml,application/json\r\n      min-request-size: 1024\r\n    response:\r\n      enabled: true\r\n  httpclient:\r\n    enabled: true\r\n    max-connections: 200\r\n    max-connections-per-route: 50\r\nmybatis:\r\n  configuration:\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n    map-underscore-to-camel-case: true\r\nmybatis-plus:\r\n  global-config:\r\n    db-column-underline: true\r\n    field-strategy: 1\r\n    id-type: 0\r\n  mapper-locations: classpath*:/mapper/*.xml\r\n# 环境变量\r\nsecurity:\r\n  environment: http://127.0.0.1:8097','073c22f3717ab3d68551bea695bcf8c8','2010-05-05 00:00:00','2024-02-26 13:49:15',NULL,'223.147.218.135','I','21c790b2-0b30-4433-a030-245f17203d2f',''),(57,80,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8087\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  gateway:\n    discovery:\n      locator:\n        # gateway可以通过开启以下配置来打开根据服务的serviceId来匹配路由,默认是大写\n        enabled: true\n    routes:\n      - id: provider1\n        uri: lb://user\n        predicates:\n          - Path=/user/**\n        filters:\n          - name: RequestRateLimiter\n          - args:\n             # 令牌桶每秒填充平均速率\n             redis-rate-limiter.replenishRate: 10\n             # 令牌桶的上限\n             redis-rate-limiter.burstCapacity: 20\n             #使用SpEL表达式从Spring容器中获取Bean对象\n             key-resolver: \"#{@userKeyResolver}\"\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 主机地址\n    host: 106.14.132.94\n    # 密码\n    password: redispassword\n    # 端口\n    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 1000\n        # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-wait: -1ms\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n# 环境变量\nenvironment: http://127.0.0.1:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/**\n','8c38543b36233e0bde8263a5c33db1af','2010-05-05 00:00:00','2024-02-26 23:15:47',NULL,'223.147.218.135','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(57,81,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8087\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  gateway:\n    discovery:\n      locator:\n        # gateway可以通过开启以下配置来打开根据服务的serviceId来匹配路由,默认是大写\n        enabled: true\n    routes:\n      - id: provider1\n        uri: lb://user\n        predicates:\n          - Path=/user/**\n        filters:\n          - name: RequestRateLimiter\n          - args:\n             # 令牌桶每秒填充平均速率\n             redis-rate-limiter.replenishRate: 10\n             # 令牌桶的上限\n             redis-rate-limiter.burstCapacity: 20\n             #使用SpEL表达式从Spring容器中获取Bean对象\n             key-resolver: \"#{@userKeyResolver}\"\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.111:6391 192.168.80.101:6392 192.168.80.101:6393 192.168.80.101:6394 192.168.80.101:6395 192.168.80.101:6396\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n# 环境变量\nenvironment: http://127.0.0.1:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/**\n','404d0f6fd2c54b7fae30224ac4164c69','2010-05-05 00:00:00','2024-02-26 23:17:13',NULL,'223.147.218.135','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(57,82,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8087\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  gateway:\n    discovery:\n      locator:\n        # gateway可以通过开启以下配置来打开根据服务的serviceId来匹配路由,默认是大写\n        enabled: true\n    routes:\n      - id: provider1\n        uri: lb://user\n        predicates:\n          - Path=/user/**\n        filters:\n          - name: RequestRateLimiter\n          - args:\n             # 令牌桶每秒填充平均速率\n             redis-rate-limiter.replenishRate: 10\n             # 令牌桶的上限\n             redis-rate-limiter.burstCapacity: 20\n             #使用SpEL表达式从Spring容器中获取Bean对象\n             key-resolver: \"#{@userKeyResolver}\"\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.111:6391 192.168.80.111:6392 192.168.80.111:6393 192.168.80.111:6394 192.168.80.111:6395 192.168.80.111:6396\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n# 环境变量\nenvironment: http://127.0.0.1:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/**\n','a9a50355b3a033a293908d134590a0a9','2010-05-05 00:00:00','2024-02-26 23:24:31',NULL,'223.147.218.135','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(57,83,'spring-cloud-gateway-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8087\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍，\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  gateway:\n    discovery:\n      locator:\n        # gateway可以通过开启以下配置来打开根据服务的serviceId来匹配路由,默认是大写\n        enabled: true\n    routes:\n      - id: provider1\n        uri: lb://user\n        predicates:\n          - Path=/user/**\n        filters:\n          - name: RequestRateLimiter\n          - args:\n             # 令牌桶每秒填充平均速率\n             redis-rate-limiter.replenishRate: 10\n             # 令牌桶的上限\n             redis-rate-limiter.burstCapacity: 20\n             #使用SpEL表达式从Spring容器中获取Bean对象\n             key-resolver: \"#{@userKeyResolver}\"\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: spring-cloud-gateway\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.111:6371 192.168.80.111:6372 192.168.80.111:6373 192.168.80.111:6374 192.168.80.111:6375 192.168.80.111:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n# 环境变量\nenvironment: http://127.0.0.1:8097\n# 网关鉴权\nauth:\n  gateway:\n    # 跳过过滤\n    shouldSkipUrls:\n      - /user/**\n','1533525a0b83ad63a960a6e4c3bdd614','2010-05-05 00:00:00','2024-02-26 23:26:39',NULL,'223.147.218.135','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(59,84,'red-package-rain-api-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8057\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 192.168.80.101:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup\r\nfile:\r\n  path: D://opt\r\nresilience4j:\r\n  retry: # 重试策略机制配置\r\n    instances: # 定义多个重试策略实例\r\n      retryApi: # 第一个重试策略重试名称\r\n        max-attempts: 3 # 操作失败最大重试次数为3\r\n        wait-duration: 1s # 每次重试等待时间1秒\r\n  circuitbreaker:\r\n    instances: # 定义多个断路器实例\r\n      circuitBreakerApi: # 第一个断路器实例名称\r\n        registerHealthIndicator: true # 配置健康指示器\r\n        slidingWindowSize: 10 # 滑动窗口大小\r\n        minimumNumberOfCalls: 5 # 最小调用次数\r\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\r\n        slidingWindowType: TIME_BASED # 滑动窗口类型\r\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\r\n        waitDurationInOpenState: 1s # 开启状态下等待时间\r\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\r\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\r\n        ignoreExceptions: # 忽略的异常列表\r\n          - java.io.IOException\r\n  ratelimiter:\r\n    instances: # 定义多个限流策略实例\r\n      rateLimiterApi: # 第一个限流策略实例名称\r\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\r\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\r\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\r\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\r\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\r\n\r\n','60b6cb9ac19746944d8aa26b1c8f553c','2010-05-05 00:00:00','2024-02-27 07:16:54',NULL,'192.168.80.101','U','21c790b2-0b30-4433-a030-245f17203d2f','default_value'),(60,85,'red-package-rain-server-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\r\nserver:\r\n  compression:\r\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\r\n    enabled: true\r\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\r\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\r\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\r\n    min-response-size: 1024\r\n  # 服务端口\r\n  port: 8067\r\n  tomcat:\r\n    threads:\r\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\r\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\r\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\r\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\r\n      max: 10000\r\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\r\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\r\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\r\n      min-spare: 1000\r\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\r\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\r\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\r\n    max-connections: 10000\r\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\r\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\r\n    accept-count: 20000\r\n# spring配置\r\nspring:\r\n  mvc:\r\n    async:\r\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\r\n      request-timeout: 20000\r\n    # 静态路径模式为/**\r\n    static-path-pattern: /**\r\n  main:\r\n    # 允许覆盖bean定义\r\n    allow-bean-definition-overriding: true\r\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\r\n    lazy-initialization: true\r\n  application:\r\n    #配置应用的名称，用于获取配置\r\n    name: red-package-rain-api\r\n  jmx:\r\n    # 关闭 Spring Boot 的JMX监控\r\n    enabled: false\r\n  jackson:\r\n    # 日期格式\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n    # 时区\r\n    time-zone: GMT+8\r\n  devtools:\r\n    restart:\r\n      # 启用自动重启\r\n      enable: true\r\n  redis:\r\n    # 数据库\r\n    database: 0\r\n    # 主机地址\r\n    host: 106.14.132.94\r\n    # 密码\r\n    password: redispassword\r\n    # 端口\r\n    port: 63791\r\n    # 连接超时时间，单位是毫秒\r\n    timeout: 60000\r\n    lettuce:\r\n      # 配置线程池参数\r\n      pool:\r\n        # 最大活跃连接数\r\n        max-active: 32\r\n        # 最大空闲连接数\r\n        max-idle: 16\r\n        # 最小空闲连接数\r\n        min-idle: 8\r\n  rocketmq:\r\n    # RocketMQ的名称服务器地址和端口号\r\n    name-server: 192.168.80.101:9876\r\n    producer:\r\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\r\n      group: RedPackageRainGroup','4c6c9df820bb18e8d03f089db00701a6','2010-05-05 00:00:00','2024-02-27 07:43:42',NULL,'192.168.80.101','U','21c790b2-0b30-4433-a030-245f17203d2f','default_value'),(61,86,'user-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','spring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\r\n    username: root\r\n    password: masterroot\r\n  devtools:\r\n    restart:\r\n      enable: true\r\n  redis:\r\n    database: 0\r\n    host: 192.168.80.121\r\n    lettuce:\r\n      pool:\r\n        max-active: 32\r\n        max-idle: 16\r\n        min-idle: 8\r\n    password: redispassword\r\n    port: 6379\r\n# 服务端口\r\nserver:\r\n  port: 8077\r\n  error:\r\n    path: http://localhost:8098/user/error\r\n  servlet:\r\n    context-path: /user\r\nappid: wx9ccd9a18a5567939\r\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\r\nbaidu:\r\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\r\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\r\nfeign:\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 5000\r\n        loggerLevel: \'BASIC  \'\r\n        readTimeout: 5000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n      mime-types: text/xml,application/xml,application/json\r\n      min-request-size: 1024\r\n    response:\r\n      enabled: true\r\n  httpclient:\r\n    enabled: true\r\n    max-connections: 200\r\n    max-connections-per-route: 50\r\nmybatis:\r\n  configuration:\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n    map-underscore-to-camel-case: true\r\nmybatis-plus:\r\n  global-config:\r\n    db-column-underline: true\r\n    field-strategy: 1\r\n    id-type: 0\r\n  mapper-locations: classpath*:/mapper/*.xml\r\n# 环境变量\r\nsecurity:\r\n  environment: http://127.0.0.1:8097','073c22f3717ab3d68551bea695bcf8c8','2010-05-05 00:00:00','2024-02-27 08:09:38',NULL,'192.168.80.101','U','21c790b2-0b30-4433-a030-245f17203d2f','default_value'),(61,87,'user-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','spring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://106.14.132.94:33061/yunxi_user?characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8\n    username: root\n    password: masterroot\n  devtools:\n    restart:\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n# 服务端口\nserver:\n  port: 8077\n  error:\n    path: http://localhost:8098/user/error\n  servlet:\n    context-path: /user\nappid: wx9ccd9a18a5567939\nsecret: 46c1f1a120f4c159e02ef2c9174e8eec\nbaidu:\n  clientId: GvNKmLtz2ywefRDfSC5g9VCE\n  clientSecret: W9X5hGyaLmWBb6oGFsd7eHrBpFoixd1B\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000\n        loggerLevel: \'BASIC  \'\n        readTimeout: 5000\n  compression:\n    request:\n      enabled: true\n      mime-types: text/xml,application/xml,application/json\n      min-request-size: 1024\n    response:\n      enabled: true\n  httpclient:\n    enabled: true\n    max-connections: 200\n    max-connections-per-route: 50\nmybatis:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\nmybatis-plus:\n  global-config:\n    db-column-underline: true\n    field-strategy: 1\n    id-type: 0\n  mapper-locations: classpath*:/mapper/*.xml\n# 环境变量\nsecurity:\n  environment: http://127.0.0.1:8097','4c5bb2681baecd691929ba58361e4580','2010-05-05 00:00:00','2024-02-27 08:10:44',NULL,'192.168.80.101','U','21c790b2-0b30-4433-a030-245f17203d2f','default_value'),(59,88,'red-package-rain-api-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8057\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: red-package-rain-api\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n  rocketmq:\n    # RocketMQ的名称服务器地址和端口号\n    name-server: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n    producer:\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\n      group: RedPackageRainGroup\nfile:\n  path: D://opt\nresilience4j:\n  retry: # 重试策略机制配置\n    instances: # 定义多个重试策略实例\n      retryApi: # 第一个重试策略重试名称\n        max-attempts: 3 # 操作失败最大重试次数为3\n        wait-duration: 1s # 每次重试等待时间1秒\n  circuitbreaker:\n    instances: # 定义多个断路器实例\n      circuitBreakerApi: # 第一个断路器实例名称\n        registerHealthIndicator: true # 配置健康指示器\n        slidingWindowSize: 10 # 滑动窗口大小\n        minimumNumberOfCalls: 5 # 最小调用次数\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\n        slidingWindowType: TIME_BASED # 滑动窗口类型\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\n        waitDurationInOpenState: 1s # 开启状态下等待时间\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        ignoreExceptions: # 忽略的异常列表\n          - java.io.IOException\n  ratelimiter:\n    instances: # 定义多个限流策略实例\n      rateLimiterApi: # 第一个限流策略实例名称\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n\n','cd20670a36c73e1b6ca2789bb452e6fa','2010-05-05 00:00:00','2024-02-27 22:31:54',NULL,'192.168.80.101','U','21c790b2-0b30-4433-a030-245f17203d2f','default_value'),(59,89,'red-package-rain-api-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8057\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: red-package-rain-api\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n  rocketmq:\n    # RocketMQ的名称服务器地址和端口号\n    name-server: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n    producer:\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\n      group: RedPackageRainGroup\nresilience4j:\n  retry: # 重试策略机制配置\n    instances: # 定义多个重试策略实例\n      retryApi: # 第一个重试策略重试名称\n        max-attempts: 3 # 操作失败最大重试次数为3\n        wait-duration: 1s # 每次重试等待时间1秒\n  circuitbreaker:\n    instances: # 定义多个断路器实例\n      circuitBreakerApi: # 第一个断路器实例名称\n        registerHealthIndicator: true # 配置健康指示器\n        slidingWindowSize: 10 # 滑动窗口大小\n        minimumNumberOfCalls: 5 # 最小调用次数\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\n        slidingWindowType: TIME_BASED # 滑动窗口类型\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\n        waitDurationInOpenState: 1s # 开启状态下等待时间\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        ignoreExceptions: # 忽略的异常列表\n          - java.io.IOException\n  ratelimiter:\n    instances: # 定义多个限流策略实例\n      rateLimiterApi: # 第一个限流策略实例名称\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n\nfile:\n  path: D://opt','93550e6feda085d2d3fb9c7305c59a9c','2010-05-05 00:00:00','2024-02-27 22:33:00',NULL,'192.168.80.101','U','21c790b2-0b30-4433-a030-245f17203d2f','default_value'),(59,90,'red-package-rain-api-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8057\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: red-package-rain-api\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n  rocketmq:\n    # RocketMQ的名称服务器地址和端口号\n    name-server: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n    producer:\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\n      group: RedPackageRainGroup\nresilience4j:\n  retry: # 重试策略机制配置\n    instances: # 定义多个重试策略实例\n      retryApi: # 第一个重试策略重试名称\n        max-attempts: 3 # 操作失败最大重试次数为3\n        wait-duration: 1s # 每次重试等待时间1秒\n  circuitbreaker:\n    instances: # 定义多个断路器实例\n      circuitBreakerApi: # 第一个断路器实例名称\n        registerHealthIndicator: true # 配置健康指示器\n        slidingWindowSize: 10 # 滑动窗口大小\n        minimumNumberOfCalls: 5 # 最小调用次数\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\n        slidingWindowType: TIME_BASED # 滑动窗口类型\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\n        waitDurationInOpenState: 1s # 开启状态下等待时间\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        ignoreExceptions: # 忽略的异常列表\n          - java.io.IOException\n  ratelimiter:\n    instances: # 定义多个限流策略实例\n      rateLimiterApi: # 第一个限流策略实例名称\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n\nfilepath: D://opt','22545e9f9800c79fdaeb8020b1520240','2010-05-05 00:00:00','2024-02-28 13:14:27',NULL,'223.153.87.140','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(59,91,'red-package-rain-api-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8057\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: red-package-rain-api\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n  rocketmq:\n    # RocketMQ的名称服务器地址和端口号\n    name-server: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n    producer:\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\n      group: RedPackageRainGroup\nresilience4j:\n  retry: # 重试策略机制配置\n    instances: # 定义多个重试策略实例\n      retryApi: # 第一个重试策略重试名称\n        max-attempts: 3 # 操作失败最大重试次数为3\n        wait-duration: 1s # 每次重试等待时间1秒\n  circuitbreaker:\n    instances: # 定义多个断路器实例\n      circuitBreakerApi: # 第一个断路器实例名称\n        registerHealthIndicator: true # 配置健康指示器\n        slidingWindowSize: 10 # 滑动窗口大小\n        minimumNumberOfCalls: 5 # 最小调用次数\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\n        slidingWindowType: TIME_BASED # 滑动窗口类型\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\n        waitDurationInOpenState: 1s # 开启状态下等待时间\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        ignoreExceptions: # 忽略的异常列表\n          - java.io.IOException\n  ratelimiter:\n    instances: # 定义多个限流策略实例\n      rateLimiterApi: # 第一个限流策略实例名称\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n\nfilepath: /opt','67d2d1b5cb5d60f128ed875f6011b280','2010-05-05 00:00:00','2024-02-28 13:15:32',NULL,'223.153.87.140','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(59,92,'red-package-rain-api-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8057\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: red-package-rain-api\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n  rocketmq:\n    # RocketMQ的名称服务器地址和端口号\n    name-server: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n    producer:\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\n      group: RedPackageRainGroup\nresilience4j:\n  retry: # 重试策略机制配置\n    instances: # 定义多个重试策略实例\n      retryApi: # 第一个重试策略重试名称\n        max-attempts: 3 # 操作失败最大重试次数为3\n        wait-duration: 1s # 每次重试等待时间1秒\n  circuitbreaker:\n    instances: # 定义多个断路器实例\n      circuitBreakerApi: # 第一个断路器实例名称\n        registerHealthIndicator: true # 配置健康指示器\n        slidingWindowSize: 10 # 滑动窗口大小\n        minimumNumberOfCalls: 5 # 最小调用次数\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\n        slidingWindowType: TIME_BASED # 滑动窗口类型\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\n        waitDurationInOpenState: 1s # 开启状态下等待时间\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        ignoreExceptions: # 忽略的异常列表\n          - java.io.IOException\n  ratelimiter:\n    instances: # 定义多个限流策略实例\n      rateLimiterApi: # 第一个限流策略实例名称\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n\nfilepath: D://opt','22545e9f9800c79fdaeb8020b1520240','2010-05-05 00:00:00','2024-02-28 13:22:30',NULL,'223.153.87.140','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(59,93,'red-package-rain-api-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8057\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: red-package-rain-api\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n  rocketmq:\n    # RocketMQ的名称服务器地址和端口号\n    name-server: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n    producer:\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\n      group: RedPackageRainGroup\nresilience4j:\n  retry: # 重试策略机制配置\n    instances: # 定义多个重试策略实例\n      retryApi: # 第一个重试策略重试名称\n        max-attempts: 3 # 操作失败最大重试次数为3\n        wait-duration: 1s # 每次重试等待时间1秒\n  circuitbreaker:\n    instances: # 定义多个断路器实例\n      circuitBreakerApi: # 第一个断路器实例名称\n        registerHealthIndicator: true # 配置健康指示器\n        slidingWindowSize: 10 # 滑动窗口大小\n        minimumNumberOfCalls: 5 # 最小调用次数\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\n        slidingWindowType: TIME_BASED # 滑动窗口类型\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\n        waitDurationInOpenState: 1s # 开启状态下等待时间\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        ignoreExceptions: # 忽略的异常列表\n          - java.io.IOException\n  ratelimiter:\n    instances: # 定义多个限流策略实例\n      rateLimiterApi: # 第一个限流策略实例名称\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        subscribe-for-events: false\nfilepath: D://opt','f0dc9a26e4c829916e479c2f456c2cc9','2010-05-05 00:00:00','2024-02-28 13:23:44',NULL,'223.153.87.140','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(59,94,'red-package-rain-api-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8057\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: red-package-rain-api\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n  rocketmq:\n    # RocketMQ的名称服务器地址和端口号\n    name-server: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n    producer:\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\n      group: RedPackageRainGroup\nresilience4j:\n  retry: # 重试策略机制配置\n    instances: # 定义多个重试策略实例\n      retryApi: # 第一个重试策略重试名称\n        max-attempts: 3 # 操作失败最大重试次数为3\n        wait-duration: 1s # 每次重试等待时间1秒\n  circuitbreaker:\n    instances: # 定义多个断路器实例\n      circuitBreakerApi: # 第一个断路器实例名称\n        registerHealthIndicator: true # 配置健康指示器\n        slidingWindowSize: 10 # 滑动窗口大小\n        minimumNumberOfCalls: 5 # 最小调用次数\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\n        slidingWindowType: TIME_BASED # 滑动窗口类型\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\n        waitDurationInOpenState: 1s # 开启状态下等待时间\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        ignoreExceptions: # 忽略的异常列表\n          - java.io.IOException\n  ratelimiter:\n    instances: # 定义多个限流策略实例\n      rateLimiterApi: # 第一个限流策略实例名称\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        subscribe-for-events: false\nfilepath: D://opt','f0dc9a26e4c829916e479c2f456c2cc9','2010-05-05 00:00:00','2024-02-28 13:24:55',NULL,'223.153.87.140','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(59,95,'red-package-rain-api-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8057\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: red-package-rain-api\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n  rocketmq:\n    # RocketMQ的名称服务器地址和端口号\n    name-server: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n    producer:\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\n      group: RedPackageRainGroup\nfilepath: D://opt\nresilience4j:\n  retry: # 重试策略机制配置\n    instances: # 定义多个重试策略实例\n      retryApi: # 第一个重试策略重试名称\n        max-attempts: 3 # 操作失败最大重试次数为3\n        wait-duration: 1s # 每次重试等待时间1秒\n  circuitbreaker:\n    instances: # 定义多个断路器实例\n      circuitBreakerApi: # 第一个断路器实例名称\n        registerHealthIndicator: true # 配置健康指示器\n        slidingWindowSize: 10 # 滑动窗口大小\n        minimumNumberOfCalls: 5 # 最小调用次数\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\n        slidingWindowType: TIME_BASED # 滑动窗口类型\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\n        waitDurationInOpenState: 1s # 开启状态下等待时间\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        ignoreExceptions: # 忽略的异常列表\n          - java.io.IOException\n  ratelimiter:\n    instances: # 定义多个限流策略实例\n      rateLimiterApi: # 第一个限流策略实例名称\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        subscribe-for-events: false # 配置限流器以订阅事件 不想订阅任何事件\n\n','763c0d036269de4316837e837cb0e5ab','2010-05-05 00:00:00','2024-02-28 13:26:35',NULL,'223.153.87.140','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(59,96,'red-package-rain-api-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8057\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: red-package-rain-api\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n  rocketmq:\n    # RocketMQ的名称服务器地址和端口号\n    name-server: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n    producer:\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\n      group: RedPackageRainGroup\nfilepath: D://opt\nresilience4j:\n  retry: # 重试策略机制配置\n    instances: # 定义多个重试策略实例\n      retryApi: # 第一个重试策略重试名称\n        max-attempts: 3 # 操作失败最大重试次数为3\n        wait-duration: 1s # 每次重试等待时间1秒\n  circuitbreaker:\n    instances: # 定义多个断路器实例\n      circuitBreakerApi: # 第一个断路器实例名称\n        registerHealthIndicator: true # 配置健康指示器\n        slidingWindowSize: 10 # 滑动窗口大小\n        minimumNumberOfCalls: 5 # 最小调用次数\n        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用次数\n        slidingWindowType: TIME_BASED # 滑动窗口类型\n        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从开启状态转换为半开状态\n        waitDurationInOpenState: 1s # 开启状态下等待时间\n        failureRateThreshold: 20 # 失败率阈值，失败率20%时，断路器打开\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        ignoreExceptions: # 忽略的异常列表\n          - java.io.IOException\n  ratelimiter:\n    instances: # 定义多个限流策略实例\n      rateLimiterApi: # 第一个限流策略实例名称\n        limitForPeriod: 10000 # 限制周期内的请求数量10000\n        limitRefreshPeriod: 10s # 限制刷新周期，10秒一个周期\n        timeoutDuration: 500ms # 超时时间为0.5秒，请求超过限制客户端立即收到超时响应，不等待\n        subscribeForEvents: AFTER_SUCCESS # 订阅事件类型\n        eventConsumerBufferSize: 10 # 事件消费者缓冲区大小\n        subscribe-for-events: true # 配置限流器以订阅事件 不想订阅任何事件\n\n','543fac2e537612b1d7e827a009c58009','2010-05-05 00:00:00','2024-02-28 13:27:06',NULL,'223.153.87.140','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(60,97,'red-package-rain-server-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8067\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  application:\n    #配置应用的名称，用于获取配置\n    name: red-package-rain-api\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\n  rocketmq:\n    # RocketMQ的名称服务器地址和端口号\n    name-server: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n    producer:\n      # Producer（消息生产者）的分组名称为RedPackageRainGroup\n      group: RedPackageRainGroup','b61cd2108ca79b30db6271617185cea4','2010-05-05 00:00:00','2024-02-28 13:35:00',NULL,'223.153.87.140','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(60,98,'red-package-rain-server-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8067\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\nrocketmq:\n  # RocketMQ的名称服务器地址和端口号\n  nameServer: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n  producer:\n    # Producer（消息生产者）的分组名称为RedPackageRainGroup\n    group: RedPackageRainGroup','67b5409dd9a869f0f943b79c7c7b0347','2010-05-05 00:00:00','2024-02-28 13:39:32',NULL,'223.153.87.140','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(60,99,'red-package-rain-server-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8067\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\nrocketmq:\n  # RocketMQ的名称服务器地址和端口号\n#  nameServer: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n  nameServer: 192.168.80.102:30913\n  producer:\n    # Producer（消息生产者）的分组名称为RedPackageRainGroup\n    group: RedPackageRainGroup','dd26389872ab61cf8fd0dad53a55ad0c','2010-05-05 00:00:00','2024-02-28 13:40:07',NULL,'223.153.87.140','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(60,100,'red-package-rain-server-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# server配置\nserver:\n  compression:\n    # 启用数据压缩，默认为false。配置完成后，当客户端请求的Accept-Encoding头中包含“gzip”或“deflate”时，Tomcat会自动压缩响应数据并返回。\n    enabled: true\n    # 需要压缩的数据类型列表，支持多个值，用逗号分隔。\n    mime-types: application/json,application/xml,text/html,text/xml,text/plain\n    # 响应数据的最小大小（字节），只有响应数据大小超过该值才会进行压缩。\n    min-response-size: 1024\n  # 服务端口\n  port: 8067\n  tomcat:\n    threads:\n      # 最多的工作线程数，默认大小是200。该参数相当于临时工，如果并发请求的数量在10到200之间，就会使用这些临时工线程进行处理。max的值不应超过服务器的物理核心数的两倍或三倍。\n      # 处理请求的能力还受到其他因素的影响，如CPU的时钟周期、内存可用性、网络带宽等。举个例子i9-12900k的时钟周期为3.2GHz，这意味着它每秒钟可以执行3.2×10^9次操作。\n      # 如果服务器内存不足，操作系统可能会频繁地进行页面交换，这将增加线程调度的开销，如果内存不足，操作系统可能会限制新的连接或请求，线程阻塞或被频繁地终止和重新创建，缓存机制可能无法正常工作，导致频繁的缓存失效和额外的磁盘I/O操作。如果堆大小设置得太小，可能会导致频繁的Full GC（垃圾回收），影响应用的响应速度和吞吐量。\n      # 通常情况下100M带宽能支持1万以上的QPS，实际影响QPS有多方面的因素，需要综合考虑。\n      max: 10000\n      # 最少的工作线程数，默认大小是10。该参数相当于长期工，如果并发请求的数量达不到10，就会依次使用这几个线程去处理请求。如果min-spare设置得太低，那么当应用程序接收到高并发请求时，线程池将无法满足服务要求而导致请求失败。\n      # 较高的min-spare值可能会导致系统响应时间变慢，因为它会创建大量线程来处理请求，这可能会占用过多的CPU和内存资源。如果将min-spare值设置得太低，则线程池可能无法及时响应请求。当系统负载较高时，有些请求可能会被暂时挂起，等待线程变得可用。\n      # 如果没有足够的空闲线程，则请求将会等待更长时间。设置较高的min-spare值会占用更多的内存资源。如果线程池中的线程数超出了系统的实际需求，则会浪费内存资源。因此，将min-spare值设置为10至20是一种平衡内存和线程利用率的方式。\n      min-spare: 1000\n      # 最大连接数，默认大小是8192。表示Tomcat可以处理的最大请求数量，超过8192的请求就会被放入到等待队列。如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。\n      # 如果设置的值太低，将会限制服务器处理客户端请求的能力，从而可能导致应用程序出现性能问题。如果设置的值太高，则会浪费服务器资源，因为服务器的处理能力可能不足以处理所有的连接。\n      # 通过经验和测试，2到4倍的QPS值通常会在服务器处理客户端请求时提供最佳性能和稳定性。这个范围也会提供一定的缓冲以应对突发流量，从而在服务器资源短缺时避免过载。\n    max-connections: 10000\n    # 等待队列的长度，默认大小是100。建议设置为 2 至 5 倍的 max-connections。将accept-count设置为2至5倍的max-connections可以确保Tomcat能够处理足够的连接请求，同时避免因过多排队连接导致的性能问题。\n    # 但是，设置过高的accept-count会增加系统负担和内存压力，同时也可能会引起其他问题，如拒绝服务攻击等。至于为什么建议不超过5倍，是因为实际上超过这个范围的设置已经很少能带来明显的性能提升，反而会增加系统负担。同时，设置过高的accept-count还可能会导致频繁的连接请求失败和性能下降，甚至可能会导致Tomcat崩溃。\n    accept-count: 20000\n# spring配置\nspring:\n  mvc:\n    async:\n      # 设置Spring MVC的异步请求的超时时间为20,000毫秒（20秒）。异步请求是指客户端发送请求到服务端后，不需要等待服务端处理完成就可以继续执行其他操作的一种请求方式。在这种请求方式下，可以提高系统的吞吐量和并发处理能力。通过设置异步请求的超时时间，可以控制请求的最大等待时间，避免长时间等待而占用系统资源。\n      request-timeout: 20000\n    # 静态路径模式为/**\n    static-path-pattern: /**\n  main:\n    # 允许覆盖bean定义\n    allow-bean-definition-overriding: true\n    # springboot2.2版本引入spring.main.lazy-initialization属性，配置为true会将所有Bean延迟初始化。\n    lazy-initialization: true\n  jmx:\n    # 关闭 Spring Boot 的JMX监控\n    enabled: false\n  jackson:\n    # 日期格式\n    date-format: yyyy-MM-dd HH:mm:ss\n    # 时区\n    time-zone: GMT+8\n  devtools:\n    restart:\n      # 启用自动重启\n      enable: true\n  redis:\n    # 数据库\n    database: 0\n    # 集群模式\n    cluster:\n      nodes: 192.168.80.101:6371,192.168.80.101:6372,192.168.80.101:6373,192.168.80.101:6374,192.168.80.101:6375,192.168.80.101:6376,192.168.80.102:6371,192.168.80.102:6372,192.168.80.102:6373,192.168.80.102:6374,192.168.80.102:6375,192.168.80.102:6376,192.168.80.103:6371,192.168.80.103:6372,192.168.80.103:6373,192.168.80.103:6374,192.168.80.103:6375,192.168.80.103:6376\n    # 主机地址\n    #    host: 106.14.132.94\n    # 密码\n    password: admin\n    # 端口\n    #    port: 63791\n    # 连接超时时间，单位是毫秒\n    timeout: 60000\n    lettuce:\n      # 配置线程池参数\n      pool:\n        # 最大活跃连接数\n        max-active: 32\n        # 最大空闲连接数\n        max-idle: 16\n        # 最小空闲连接数\n        min-idle: 8\n        # 最大阻塞时间\n        max-wait: 5000ms\nrocketmq:\n  # RocketMQ的名称服务器地址和端口号\n#  nameServer: 192.168.80.102:30913,192.168.80.101:30913,192.168.80.103:30913,192.168.80.102:30912,192.168.80.101:30912,192.168.80.103:30912,192.168.80.102:30911,192.168.80.101:30911,192.168.80.103:30911\n  nameServer: 192.168.80.102:30913,192.168.80.101:30913\n  producer:\n    # Producer（消息生产者）的分组名称为RedPackageRainGroup\n    group: RedPackageRainGroup','08c8aecbc5be0dd7ecbf240122dd5080','2010-05-05 00:00:00','2024-02-28 13:43:33',NULL,'223.153.87.140','U','21c790b2-0b30-4433-a030-245f17203d2f',''),(61,101,'user-local.yaml','RED_PACKAGE_RAIN_LOCAL_GROUP','本地环境','# 本地的user-local.yaml不起作用，直接读取nacos上的配置，本地的user-local.yaml文件保留下来作为参考\n\n# 开发环境配置：\n## bootstrap.yml优先级比application.yml优先级高\n#spring:\n#  # prefix-{spring.profile.active}.${file-extension}\n#  # Nacos会根据当前环境去拼接配置名称查找相应配置文件，\n#  # 示例：{spring.application.name}-{spring.profiles.active}-{spring.cloud.nacos.config.file-extension}\n#  # 获取到值：user-local.yaml\n#  # Nacos会根据当前环境和file-extension参数去拼接配置文件名称\n#  profiles:\n#    # 本地环境local，开发环境dev，测试环境test，生产环境prod\n#    # 当前活动的配置文件为dev\n#    active: dev\n#    # 应用名称\n#  application:\n#    name: user\n#  cloud:\n#    nacos:\n#      discovery:\n#        # 服务注册地址\n#        server-addr: 106.14.132.94:8848\n#      config:\n#        #nacos配置中心地址\n#        server-addr: 106.14.132.94:8848\n#        #配置中心的命名空间id dev\n#        namespace: 100df702-2100-4d18-ae40-e77eb60bd387\n#        #配置分组，默认没有也可以 dev\n#        group: RED_PACKAGE_RAIN_DEV_GROUP\n#        #配置文件后缀，用于拼接配置配置文件名称，目前只支持yaml和properties\n#        file-extension: yaml\n#        #配置自动刷新\n#        refresh-enabled: true\n#        #配置文件的前缀，默认是application.name的值，如果配了prefix，就取prefix的值\n#        prefix: user-dev\n#        # 配置编码\n#        encode: UTF-8\n#        # 用户名\n#        username: nacos\n#        # 密码\n#        password: nacos\n\n\n# 本地环境配置：\n# bootstrap.yml优先级比application.yml优先级高\nspring:\n  # prefix-{spring.profile.active}.${file-extension}\n  # Nacos会根据当前环境去拼接配置名称查找相应配置文件，\n  # 示例：{spring.application.name}-{spring.profiles.active}-{spring.cloud.nacos.config.file-extension}\n  # 获取到值：user-local.yaml\n  # Nacos会根据当前环境和file-extension参数去拼接配置文件名称\n  profiles:\n    # 本地环境local，开发环境dev，测试环境test，生产环境prod\n    # 当前活动的配置文件为dev\n    active: local\n    # 应用名称\n  application:\n    name: user\n  cloud:\n    nacos:\n      discovery:\n        # 服务注册地址\n        server-addr: 106.14.132.94:8848\n      config:\n        #nacos配置中心地址\n        server-addr: 106.14.132.94:8848\n        #配置中心的命名空间id local\n        namespace: 21c790b2-0b30-4433-a030-245f17203d2f\n        #配置分组，默认没有也可以 local\n        group: RED_PACKAGE_RAIN_LOCAL_GROUP\n        #配置文件后缀，用于拼接配置配置文件名称，目前只支持yaml和properties\n        file-extension: yaml\n        #配置自动刷新\n        refresh-enabled: true\n        #配置文件的前缀，默认是application.name的值，如果配了prefix，就取prefix的值\n        prefix: user-dev\n        # 配置编码\n        encode: UTF-8\n        # 用户名\n        username: nacos\n        # 密码\n        password: nacos','0cdf6b7c404f8295c6902a06f7d44adf','2010-05-05 00:00:00','2024-02-28 13:46:36',NULL,'223.153.87.140','U','21c790b2-0b30-4433-a030-245f17203d2f','');

/*Table structure for table `permissions` */

DROP TABLE IF EXISTS `permissions`;

CREATE TABLE `permissions` (
  `role` varchar(50) COLLATE utf8mb4_general_ci NOT NULL,
  `resource` varchar(512) COLLATE utf8mb4_general_ci NOT NULL,
  `action` varchar(8) COLLATE utf8mb4_general_ci NOT NULL,
  UNIQUE KEY `uk_role_permission` (`role`,`resource`,`action`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `permissions` */

/*Table structure for table `roles` */

DROP TABLE IF EXISTS `roles`;

CREATE TABLE `roles` (
  `username` varchar(50) COLLATE utf8mb4_general_ci NOT NULL,
  `role` varchar(50) COLLATE utf8mb4_general_ci NOT NULL,
  UNIQUE KEY `uk_username_role` (`username`,`role`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `roles` */

insert  into `roles`(`username`,`role`) values ('nacos','ROLE_ADMIN');

/*Table structure for table `tenant_capacity` */

DROP TABLE IF EXISTS `tenant_capacity`;

CREATE TABLE `tenant_capacity` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',
  `max_aggr_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='租户容量信息表';

/*Data for the table `tenant_capacity` */

/*Table structure for table `tenant_info` */

DROP TABLE IF EXISTS `tenant_info`;

CREATE TABLE `tenant_info` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) COLLATE utf8_bin DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='tenant_info';

/*Data for the table `tenant_info` */

insert  into `tenant_info`(`id`,`kp`,`tenant_id`,`tenant_name`,`tenant_desc`,`create_source`,`gmt_create`,`gmt_modified`) values (1,'1','e470221b-f247-44f2-b2af-e2173c40ef98','test','测试环境','nacos',1706334222688,1706334222688),(2,'1','82c104d6-827b-4840-be52-7a438dc3bab4','prod','生产环境','nacos',1706334238395,1706334238395),(3,'1','100df702-2100-4d18-ae40-e77eb60bd387','dev','开发环境','nacos',1706334248235,1706334248235),(4,'1','21c790b2-0b30-4433-a030-245f17203d2f','local','本地环境','nacos',1706334261322,1706334261322);

/*Table structure for table `users` */

DROP TABLE IF EXISTS `users`;

CREATE TABLE `users` (
  `username` varchar(50) COLLATE utf8mb4_general_ci NOT NULL,
  `password` varchar(500) COLLATE utf8mb4_general_ci NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `users` */

insert  into `users`(`username`,`password`,`enabled`) values ('na','$2a$10$brinSclc7qBsQbtUX7NOv.4GtpwMoYf86LJ8MaSl0SmNVHNZhysmW',1),('nacos','$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu',1),('qqqwww1240','$2a$10$YpqWRK6x6vdm5uiMN9ijce44tmh/ywMYmGHt43AJtfEmMiqO4T/eK',1),('wwwdddd1223555','$2a$10$Nn3kJL3XyV3BIlqckUDmeeBqrnJSTepV4qlFgItv1wAP1s6w2fubm',1);

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
