http{
	#$binary_remote_addr：这是一个变量，表示远程客户端的 IP 地址（以二进制形式存储，以节省空间）。这是用于跟踪每个客户端状态的键。zone=one:10m：这定义了一个名为 one的内存区域，大小为 10MB。这个区域用于存储客户端的状态信息。rate=20r/s：这限制了来自每个客户端的平均请求频率为每秒 20 个。
	#limit_req_zone 使用一种称为“漏桶”（leaky bucket）的算法来限制请求速率。每个客户端的状态通常包括一个计数器，用于跟踪最近的请求数量，以及一个时间戳，用于确定这些请求是在多长时间内发生的。这些信息需要存储在内存中。Nginx 可能会使用一种高效的数据结构来存储这些信息，例如哈希表，其中键是客户端的 IP 地址（或其二进制表示），值是包含计数器和时间戳的状态信息。由于状态信息通常不会很大（只是计数器和时间戳），并且使用了高效的数据结构，因此可以在相对较小的内存空间内存储大量的状态。
    limit_req_zone $binary_remote_addr zone=one:10m rate=20r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    #定义一个名为addr的limit_req_zone用来存储session，大小是10M内存，
    #以$binary_remote_addr 为key
    #nginx 1.18以后用limit_conn_zone替换了limit_conn,
    #且只能放在http{}代码段．
    server{
        location / {
            #严格规定每ip每秒不能超过20个请求，漏桶数量设定为5。若在第1秒及之后几秒内可以收到不超过20个请求，第5秒的25个请求是可被接受的；反之，若在第1秒就达到25个请求，那么第2秒超过20个请求的部分都会返回503错误。关于nodelay参数，若未进行适当设定，请求数量将严格遵循平均速率来进行控制。当第1秒有25个请求时，实际处理的请求数量仅能达到20个，其余5个将被存放到第2秒执行；然而，若启用了nodelay功能，这25个请求将会在第1秒被处理。
            limit_req zone=one burst=5 nodelay;
            #连接数限制，并发数，设置每个IP地址的并发连接数限制。设置给定键值的共享内存区域和允许的最大连接数。超出此限制时，服务器将返回503（服务临时不可用）错误
            limit_conn addr 10;
        }
    }
}